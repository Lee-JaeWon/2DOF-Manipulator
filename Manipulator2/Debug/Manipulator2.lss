
Manipulator2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800100  00800100  00001520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f5  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095a  00000000  00000000  00002f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a6  00000000  00000000  0000389b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00004244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058b  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9e  00000000  00000000  00004b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000057bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
       2:	00 00       	nop
       4:	6f c4       	rjmp	.+2270   	; 0x8e4 <__vector_1>
       6:	00 00       	nop
       8:	81 c4       	rjmp	.+2306   	; 0x90c <__vector_2>
       a:	00 00       	nop
       c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
      12:	00 00       	nop
      14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
      16:	00 00       	nop
      18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
      1e:	00 00       	nop
      20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
      2e:	00 00       	nop
      30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
      32:	00 00       	nop
      34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c6       	rjmp	.+3388   	; 0xd76 <__vector_14>
      3a:	00 00       	nop
      3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c4       	rjmp	.+2302   	; 0x940 <__vector_16>
      42:	00 00       	nop
      44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
      62:	00 00       	nop
      64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
      66:	00 00       	nop
      68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
      72:	00 00       	nop
      74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c2       	rjmp	.+1498   	; 0x654 <__vector_30>
      7a:	00 00       	nop
      7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e1       	ldi	r29, 0x10	; 16
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 3b       	cpi	r26, 0xB4	; 180
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	b7 d6       	rcall	.+3438   	; 0xe46 <main>
      d8:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <_exit>

000000dc <__bad_interrupt>:
      dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <UART0_INIT>:
	UART0_Transmit(0x03);
	UART0_Transmit(0x19);//데이터 쓰기
	UART0_Transmit(ONOFF);//LED
	UART0_Transmit(Check_Sum);

}
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	82 b9       	out	0x02, r24	; 2
      e2:	1b b8       	out	0x0b, r1	; 11
      e4:	88 e0       	ldi	r24, 0x08	; 8
      e6:	8a b9       	out	0x0a, r24	; 10
      e8:	96 e0       	ldi	r25, 0x06	; 6
      ea:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
      ee:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
      f2:	89 b9       	out	0x09, r24	; 9
      f4:	08 95       	ret

000000f6 <UART0_Transmit>:
      f6:	5d 9b       	sbis	0x0b, 5	; 11
      f8:	fe cf       	rjmp	.-4      	; 0xf6 <UART0_Transmit>
      fa:	8c b9       	out	0x0c, r24	; 12
      fc:	08 95       	ret

000000fe <Dynamixel_Moving>:
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	18 2f       	mov	r17, r24
     10a:	f6 2e       	mov	r15, r22
     10c:	d7 2f       	mov	r29, r23
     10e:	04 2f       	mov	r16, r20
     110:	c5 2f       	mov	r28, r21
     112:	8f ef       	ldi	r24, 0xFF	; 255
     114:	f0 df       	rcall	.-32     	; 0xf6 <UART0_Transmit>
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	ee df       	rcall	.-36     	; 0xf6 <UART0_Transmit>
     11a:	81 2f       	mov	r24, r17
     11c:	ec df       	rcall	.-40     	; 0xf6 <UART0_Transmit>
     11e:	87 e0       	ldi	r24, 0x07	; 7
     120:	ea df       	rcall	.-44     	; 0xf6 <UART0_Transmit>
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	e8 df       	rcall	.-48     	; 0xf6 <UART0_Transmit>
     126:	8e e1       	ldi	r24, 0x1E	; 30
     128:	e6 df       	rcall	.-52     	; 0xf6 <UART0_Transmit>
     12a:	80 2f       	mov	r24, r16
     12c:	e4 df       	rcall	.-56     	; 0xf6 <UART0_Transmit>
     12e:	8c 2f       	mov	r24, r28
     130:	e2 df       	rcall	.-60     	; 0xf6 <UART0_Transmit>
     132:	8f 2d       	mov	r24, r15
     134:	e0 df       	rcall	.-64     	; 0xf6 <UART0_Transmit>
     136:	8d 2f       	mov	r24, r29
     138:	de df       	rcall	.-68     	; 0xf6 <UART0_Transmit>
     13a:	88 e2       	ldi	r24, 0x28	; 40
     13c:	8f 0d       	add	r24, r15
     13e:	80 0f       	add	r24, r16
     140:	81 0f       	add	r24, r17
     142:	8d 0f       	add	r24, r29
     144:	8c 0f       	add	r24, r28
     146:	80 95       	com	r24
     148:	d6 df       	rcall	.-84     	; 0xf6 <UART0_Transmit>
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
     152:	ff 90       	pop	r15
     154:	08 95       	ret

00000156 <UART1_INIT>:

void UART1_INIT()
{
	DDRD = (1<<DDD3);
     156:	88 e0       	ldi	r24, 0x08	; 8
     158:	81 bb       	out	0x11, r24	; 17
	
	UCSR1A = 0x00;
     15a:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = (1 << RXCIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12);
     15e:	98 e9       	ldi	r25, 0x98	; 152
     160:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); //011 -> 8bit
     164:	96 e0       	ldi	r25, 0x06	; 6
     166:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	
	UBRR1H = 0;
     16a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 8;  // Baud Rate 11520
     16e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     172:	08 95       	ret

00000174 <UART1_Transmit>:
}

void UART1_Transmit(unsigned char cData)
{
	while (!(UCSR1A & (1<<UDRE1)));
     174:	eb e9       	ldi	r30, 0x9B	; 155
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	90 81       	ld	r25, Z
     17a:	95 ff       	sbrs	r25, 5
     17c:	fd cf       	rjmp	.-6      	; 0x178 <UART1_Transmit+0x4>
	
	UDR1 = cData;
     17e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     182:	08 95       	ret

00000184 <UART1_Receive>:
}

unsigned char UART1_Receive()
{
	while (!(UCSR1A & (1<<RXC1)));
     184:	eb e9       	ldi	r30, 0x9B	; 155
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	88 23       	and	r24, r24
     18c:	ec f7       	brge	.-6      	; 0x188 <UART1_Receive+0x4>
	
	return UDR1;
     18e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
     192:	08 95       	ret

00000194 <degree_manipulator>:

void degree_manipulator(int x, int y, double* pd1, double* pd2)
{
     194:	4f 92       	push	r4
     196:	5f 92       	push	r5
     198:	6f 92       	push	r6
     19a:	7f 92       	push	r7
     19c:	8f 92       	push	r8
     19e:	9f 92       	push	r9
     1a0:	af 92       	push	r10
     1a2:	bf 92       	push	r11
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	66 97       	sbiw	r28, 0x16	; 22
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	cd bf       	out	0x3d, r28	; 61
     1c4:	7b 01       	movw	r14, r22
     1c6:	5e 8b       	std	Y+22, r21	; 0x16
     1c8:	4d 8b       	std	Y+21, r20	; 0x15
     1ca:	89 01       	movw	r16, r18

	double d1, d2; //각도1 각도2
	double cd2, sd2, cd1, sd1;
	//x, y 좌표 범위 13.6< <19.714 내 입력

	cd2 = (pow(x,2) + pow(y,2) - l1 * l1 - l2 * l2) / (2 * l1 * l2);
     1cc:	bc 01       	movw	r22, r24
     1ce:	99 0f       	add	r25, r25
     1d0:	88 0b       	sbc	r24, r24
     1d2:	99 0b       	sbc	r25, r25
     1d4:	a8 d7       	rcall	.+3920   	; 0x1126 <__floatsisf>
     1d6:	69 83       	std	Y+1, r22	; 0x01
     1d8:	7a 83       	std	Y+2, r23	; 0x02
     1da:	8b 83       	std	Y+3, r24	; 0x03
     1dc:	9c 83       	std	Y+4, r25	; 0x04
     1de:	b7 01       	movw	r22, r14
     1e0:	ff 0c       	add	r15, r15
     1e2:	88 0b       	sbc	r24, r24
     1e4:	99 0b       	sbc	r25, r25
     1e6:	9f d7       	rcall	.+3902   	; 0x1126 <__floatsisf>
     1e8:	6d 83       	std	Y+5, r22	; 0x05
     1ea:	7e 83       	std	Y+6, r23	; 0x06
     1ec:	8f 83       	std	Y+7, r24	; 0x07
     1ee:	98 87       	std	Y+8, r25	; 0x08
     1f0:	29 81       	ldd	r18, Y+1	; 0x01
     1f2:	3a 81       	ldd	r19, Y+2	; 0x02
     1f4:	4b 81       	ldd	r20, Y+3	; 0x03
     1f6:	5c 81       	ldd	r21, Y+4	; 0x04
     1f8:	ca 01       	movw	r24, r20
     1fa:	b9 01       	movw	r22, r18
     1fc:	0e 94 4b 09 	call	0x1296	; 0x1296 <__mulsf3>
     200:	6b 01       	movw	r12, r22
     202:	7c 01       	movw	r14, r24
     204:	2d 81       	ldd	r18, Y+5	; 0x05
     206:	3e 81       	ldd	r19, Y+6	; 0x06
     208:	4f 81       	ldd	r20, Y+7	; 0x07
     20a:	58 85       	ldd	r21, Y+8	; 0x08
     20c:	ca 01       	movw	r24, r20
     20e:	b9 01       	movw	r22, r18
     210:	0e 94 4b 09 	call	0x1296	; 0x1296 <__mulsf3>
     214:	9b 01       	movw	r18, r22
     216:	ac 01       	movw	r20, r24
     218:	c7 01       	movw	r24, r14
     21a:	b6 01       	movw	r22, r12
     21c:	23 d6       	rcall	.+3142   	; 0xe64 <__addsf3>
     21e:	2b e7       	ldi	r18, 0x7B	; 123
     220:	34 e1       	ldi	r19, 0x14	; 20
     222:	40 ec       	ldi	r20, 0xC0	; 192
     224:	53 e4       	ldi	r21, 0x43	; 67
     226:	1d d6       	rcall	.+3130   	; 0xe62 <__subsf3>
     228:	25 ef       	ldi	r18, 0xF5	; 245
     22a:	38 eb       	ldi	r19, 0xB8	; 184
     22c:	47 e0       	ldi	r20, 0x07	; 7
     22e:	53 e4       	ldi	r21, 0x43	; 67
     230:	18 d6       	rcall	.+3120   	; 0xe62 <__subsf3>
     232:	2a e0       	ldi	r18, 0x0A	; 10
     234:	37 e5       	ldi	r19, 0x57	; 87
     236:	44 ee       	ldi	r20, 0xE4	; 228
     238:	53 e4       	ldi	r21, 0x43	; 67
     23a:	da d6       	rcall	.+3508   	; 0xff0 <__divsf3>
     23c:	4b 01       	movw	r8, r22
     23e:	5c 01       	movw	r10, r24
	sd2 = sqrt(1 - (cd2 * cd2));
     240:	9b 01       	movw	r18, r22
     242:	ac 01       	movw	r20, r24
     244:	0e 94 4b 09 	call	0x1296	; 0x1296 <__mulsf3>
     248:	6b 01       	movw	r12, r22
     24a:	7c 01       	movw	r14, r24
     24c:	a7 01       	movw	r20, r14
     24e:	96 01       	movw	r18, r12
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 e8       	ldi	r24, 0x80	; 128
     256:	9f e3       	ldi	r25, 0x3F	; 63
     258:	04 d6       	rcall	.+3080   	; 0xe62 <__subsf3>
     25a:	0e 94 b2 09 	call	0x1364	; 0x1364 <sqrt>
     25e:	6b 01       	movw	r12, r22
	d2 = atan2(sd2, cd2);
     260:	7c 01       	movw	r14, r24
     262:	a5 01       	movw	r20, r10
     264:	94 01       	movw	r18, r8
     266:	71 d6       	rcall	.+3298   	; 0xf4a <atan2>
     268:	6d 87       	std	Y+13, r22	; 0x0d
     26a:	7e 87       	std	Y+14, r23	; 0x0e
     26c:	8f 87       	std	Y+15, r24	; 0x0f
     26e:	98 8b       	std	Y+16, r25	; 0x10

	cd1 = ((l1 + l2 * cd2) * x + (l2 * sd2) * y) / ((l1 + l2 * cd2) * (l1 + l2 * cd2) + (l2 * sd2) * (l2 * sd2));
     270:	26 e6       	ldi	r18, 0x66	; 102
     272:	36 e6       	ldi	r19, 0x66	; 102
     274:	4a e3       	ldi	r20, 0x3A	; 58
     276:	51 e4       	ldi	r21, 0x41	; 65
     278:	c5 01       	movw	r24, r10
     27a:	b4 01       	movw	r22, r8
     27c:	0e 94 4b 09 	call	0x1296	; 0x1296 <__mulsf3>
     280:	2d ec       	ldi	r18, 0xCD	; 205
     282:	3c ec       	ldi	r19, 0xCC	; 204
     284:	4c e9       	ldi	r20, 0x9C	; 156
     286:	51 e4       	ldi	r21, 0x41	; 65
     288:	ed d5       	rcall	.+3034   	; 0xe64 <__addsf3>
     28a:	69 87       	std	Y+9, r22	; 0x09
     28c:	7a 87       	std	Y+10, r23	; 0x0a
     28e:	8b 87       	std	Y+11, r24	; 0x0b
     290:	9c 87       	std	Y+12, r25	; 0x0c
     292:	26 e6       	ldi	r18, 0x66	; 102
     294:	36 e6       	ldi	r19, 0x66	; 102
     296:	4a e3       	ldi	r20, 0x3A	; 58
     298:	51 e4       	ldi	r21, 0x41	; 65
     29a:	c7 01       	movw	r24, r14
     29c:	b6 01       	movw	r22, r12
     29e:	fb d7       	rcall	.+4086   	; 0x1296 <__mulsf3>
     2a0:	4b 01       	movw	r8, r22
     2a2:	5c 01       	movw	r10, r24
     2a4:	29 85       	ldd	r18, Y+9	; 0x09
     2a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     2a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     2aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     2ac:	ca 01       	movw	r24, r20
     2ae:	b9 01       	movw	r22, r18
     2b0:	f2 d7       	rcall	.+4068   	; 0x1296 <__mulsf3>
     2b2:	2b 01       	movw	r4, r22
     2b4:	3c 01       	movw	r6, r24
     2b6:	a5 01       	movw	r20, r10
     2b8:	94 01       	movw	r18, r8
     2ba:	c5 01       	movw	r24, r10
     2bc:	b4 01       	movw	r22, r8
     2be:	eb d7       	rcall	.+4054   	; 0x1296 <__mulsf3>
     2c0:	9b 01       	movw	r18, r22
     2c2:	ac 01       	movw	r20, r24
     2c4:	c3 01       	movw	r24, r6
     2c6:	b2 01       	movw	r22, r4
     2c8:	cd d5       	rcall	.+2970   	; 0xe64 <__addsf3>
     2ca:	2b 01       	movw	r4, r22
     2cc:	3c 01       	movw	r6, r24
	sd1 = ((-1 * l2 * sd2) * x + (l1 + l2 * cd2) * y) / (((l1 + l2 * cd2) * (l1 + l2 * cd2)) + ((l2 * sd2) * (l2 * sd2)));

	d1 = atan2(sd1, cd1);
     2ce:	29 85       	ldd	r18, Y+9	; 0x09
     2d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     2d2:	4b 85       	ldd	r20, Y+11	; 0x0b
     2d4:	5c 85       	ldd	r21, Y+12	; 0x0c
     2d6:	69 81       	ldd	r22, Y+1	; 0x01
     2d8:	7a 81       	ldd	r23, Y+2	; 0x02
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	9c 81       	ldd	r25, Y+4	; 0x04
     2de:	db d7       	rcall	.+4022   	; 0x1296 <__mulsf3>
     2e0:	69 8b       	std	Y+17, r22	; 0x11
     2e2:	7a 8b       	std	Y+18, r23	; 0x12
     2e4:	8b 8b       	std	Y+19, r24	; 0x13
     2e6:	9c 8b       	std	Y+20, r25	; 0x14
     2e8:	a5 01       	movw	r20, r10
     2ea:	94 01       	movw	r18, r8
     2ec:	6d 81       	ldd	r22, Y+5	; 0x05
     2ee:	7e 81       	ldd	r23, Y+6	; 0x06
     2f0:	8f 81       	ldd	r24, Y+7	; 0x07
     2f2:	98 85       	ldd	r25, Y+8	; 0x08
     2f4:	d0 d7       	rcall	.+4000   	; 0x1296 <__mulsf3>
     2f6:	9b 01       	movw	r18, r22
     2f8:	ac 01       	movw	r20, r24
     2fa:	69 89       	ldd	r22, Y+17	; 0x11
     2fc:	7a 89       	ldd	r23, Y+18	; 0x12
     2fe:	8b 89       	ldd	r24, Y+19	; 0x13
     300:	9c 89       	ldd	r25, Y+20	; 0x14
     302:	b0 d5       	rcall	.+2912   	; 0xe64 <__addsf3>
     304:	a3 01       	movw	r20, r6
     306:	92 01       	movw	r18, r4
     308:	73 d6       	rcall	.+3302   	; 0xff0 <__divsf3>
     30a:	4b 01       	movw	r8, r22
     30c:	5c 01       	movw	r10, r24
     30e:	26 e6       	ldi	r18, 0x66	; 102
     310:	36 e6       	ldi	r19, 0x66	; 102
     312:	4a e3       	ldi	r20, 0x3A	; 58
     314:	51 ec       	ldi	r21, 0xC1	; 193
     316:	c7 01       	movw	r24, r14
     318:	b6 01       	movw	r22, r12
     31a:	bd d7       	rcall	.+3962   	; 0x1296 <__mulsf3>
     31c:	29 81       	ldd	r18, Y+1	; 0x01
     31e:	3a 81       	ldd	r19, Y+2	; 0x02
     320:	4b 81       	ldd	r20, Y+3	; 0x03
     322:	5c 81       	ldd	r21, Y+4	; 0x04
     324:	b8 d7       	rcall	.+3952   	; 0x1296 <__mulsf3>
     326:	6b 01       	movw	r12, r22
     328:	7c 01       	movw	r14, r24
     32a:	29 85       	ldd	r18, Y+9	; 0x09
     32c:	3a 85       	ldd	r19, Y+10	; 0x0a
     32e:	4b 85       	ldd	r20, Y+11	; 0x0b
     330:	5c 85       	ldd	r21, Y+12	; 0x0c
     332:	6d 81       	ldd	r22, Y+5	; 0x05
     334:	7e 81       	ldd	r23, Y+6	; 0x06
     336:	8f 81       	ldd	r24, Y+7	; 0x07
     338:	98 85       	ldd	r25, Y+8	; 0x08
     33a:	ad d7       	rcall	.+3930   	; 0x1296 <__mulsf3>
     33c:	9b 01       	movw	r18, r22
     33e:	ac 01       	movw	r20, r24
     340:	c7 01       	movw	r24, r14
     342:	b6 01       	movw	r22, r12
     344:	8f d5       	rcall	.+2846   	; 0xe64 <__addsf3>
     346:	a3 01       	movw	r20, r6
     348:	92 01       	movw	r18, r4
     34a:	52 d6       	rcall	.+3236   	; 0xff0 <__divsf3>
     34c:	a5 01       	movw	r20, r10
     34e:	94 01       	movw	r18, r8
     350:	fc d5       	rcall	.+3064   	; 0xf4a <atan2>
	
	d1 = (57.3) * d1; //라디안
	d2 = (57.3) * d2;

	*pd1 = d1;
     352:	23 e3       	ldi	r18, 0x33	; 51
     354:	33 e3       	ldi	r19, 0x33	; 51
     356:	45 e6       	ldi	r20, 0x65	; 101
     358:	52 e4       	ldi	r21, 0x42	; 66
     35a:	9d d7       	rcall	.+3898   	; 0x1296 <__mulsf3>
     35c:	ed 89       	ldd	r30, Y+21	; 0x15
     35e:	fe 89       	ldd	r31, Y+22	; 0x16
     360:	60 83       	st	Z, r22
     362:	71 83       	std	Z+1, r23	; 0x01
     364:	82 83       	std	Z+2, r24	; 0x02
     366:	93 83       	std	Z+3, r25	; 0x03
     368:	23 e3       	ldi	r18, 0x33	; 51
	*pd2 = d2;
     36a:	33 e3       	ldi	r19, 0x33	; 51
     36c:	45 e6       	ldi	r20, 0x65	; 101
     36e:	52 e4       	ldi	r21, 0x42	; 66
     370:	6d 85       	ldd	r22, Y+13	; 0x0d
     372:	7e 85       	ldd	r23, Y+14	; 0x0e
     374:	8f 85       	ldd	r24, Y+15	; 0x0f
     376:	98 89       	ldd	r25, Y+16	; 0x10
     378:	8e d7       	rcall	.+3868   	; 0x1296 <__mulsf3>
     37a:	f8 01       	movw	r30, r16
     37c:	60 83       	st	Z, r22
     37e:	71 83       	std	Z+1, r23	; 0x01
     380:	82 83       	std	Z+2, r24	; 0x02
     382:	93 83       	std	Z+3, r25	; 0x03
     384:	66 96       	adiw	r28, 0x16	; 22
     386:	0f b6       	in	r0, 0x3f	; 63
}
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	6f 90       	pop	r6
     3ac:	5f 90       	pop	r5
     3ae:	4f 90       	pop	r4
     3b0:	08 95       	ret

000003b2 <minus_degree_manipulator>:
     3b2:	4f 92       	push	r4
     3b4:	5f 92       	push	r5

void minus_degree_manipulator(int x, int y, double* pd1, double* pd2)
{
     3b6:	6f 92       	push	r6
     3b8:	7f 92       	push	r7
     3ba:	8f 92       	push	r8
     3bc:	9f 92       	push	r9
     3be:	af 92       	push	r10
     3c0:	bf 92       	push	r11
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	66 97       	sbiw	r28, 0x16	; 22
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	7b 01       	movw	r14, r22
     3e4:	5e 8b       	std	Y+22, r21	; 0x16
     3e6:	4d 8b       	std	Y+21, r20	; 0x15
     3e8:	89 01       	movw	r16, r18

	double d1, d2; //각도1 각도2
	double cd2, sd2, cd1, sd1;
	//x, y 좌표 범위 13.6< <19.714 내 입력

	cd2 = (pow(x, 2) + pow(y, 2) - l1 * l1 - l2 * l2) / (2 * l1 * l2);
     3ea:	bc 01       	movw	r22, r24
     3ec:	99 0f       	add	r25, r25
     3ee:	88 0b       	sbc	r24, r24
     3f0:	99 0b       	sbc	r25, r25
     3f2:	99 d6       	rcall	.+3378   	; 0x1126 <__floatsisf>
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	7a 83       	std	Y+2, r23	; 0x02
     3f8:	8b 83       	std	Y+3, r24	; 0x03
     3fa:	9c 83       	std	Y+4, r25	; 0x04
     3fc:	b7 01       	movw	r22, r14
     3fe:	ff 0c       	add	r15, r15
     400:	88 0b       	sbc	r24, r24
     402:	99 0b       	sbc	r25, r25
     404:	90 d6       	rcall	.+3360   	; 0x1126 <__floatsisf>
     406:	6b 01       	movw	r12, r22
     408:	7c 01       	movw	r14, r24
     40a:	29 81       	ldd	r18, Y+1	; 0x01
     40c:	3a 81       	ldd	r19, Y+2	; 0x02
     40e:	4b 81       	ldd	r20, Y+3	; 0x03
     410:	5c 81       	ldd	r21, Y+4	; 0x04
     412:	ca 01       	movw	r24, r20
     414:	b9 01       	movw	r22, r18
     416:	3f d7       	rcall	.+3710   	; 0x1296 <__mulsf3>
     418:	4b 01       	movw	r8, r22
     41a:	5c 01       	movw	r10, r24
     41c:	a7 01       	movw	r20, r14
     41e:	96 01       	movw	r18, r12
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	38 d7       	rcall	.+3696   	; 0x1296 <__mulsf3>
     426:	9b 01       	movw	r18, r22
     428:	ac 01       	movw	r20, r24
     42a:	c5 01       	movw	r24, r10
     42c:	b4 01       	movw	r22, r8
     42e:	1a d5       	rcall	.+2612   	; 0xe64 <__addsf3>
     430:	2b e7       	ldi	r18, 0x7B	; 123
     432:	34 e1       	ldi	r19, 0x14	; 20
     434:	40 ec       	ldi	r20, 0xC0	; 192
     436:	53 e4       	ldi	r21, 0x43	; 67
     438:	14 d5       	rcall	.+2600   	; 0xe62 <__subsf3>
     43a:	25 ef       	ldi	r18, 0xF5	; 245
     43c:	38 eb       	ldi	r19, 0xB8	; 184
     43e:	47 e0       	ldi	r20, 0x07	; 7
     440:	53 e4       	ldi	r21, 0x43	; 67
     442:	0f d5       	rcall	.+2590   	; 0xe62 <__subsf3>
     444:	2a e0       	ldi	r18, 0x0A	; 10
     446:	37 e5       	ldi	r19, 0x57	; 87
     448:	44 ee       	ldi	r20, 0xE4	; 228
     44a:	53 e4       	ldi	r21, 0x43	; 67
     44c:	d1 d5       	rcall	.+2978   	; 0xff0 <__divsf3>
     44e:	4b 01       	movw	r8, r22
     450:	5c 01       	movw	r10, r24
	sd2 = (-1) * sqrt(1 - (cd2 * cd2));
     452:	9b 01       	movw	r18, r22
     454:	ac 01       	movw	r20, r24
     456:	1f d7       	rcall	.+3646   	; 0x1296 <__mulsf3>
     458:	2b 01       	movw	r4, r22
     45a:	3c 01       	movw	r6, r24
     45c:	a3 01       	movw	r20, r6
     45e:	92 01       	movw	r18, r4
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	80 e8       	ldi	r24, 0x80	; 128
     466:	9f e3       	ldi	r25, 0x3F	; 63
     468:	fc d4       	rcall	.+2552   	; 0xe62 <__subsf3>
     46a:	7c d7       	rcall	.+3832   	; 0x1364 <sqrt>
     46c:	2b 01       	movw	r4, r22
     46e:	3c 01       	movw	r6, r24
     470:	77 fa       	bst	r7, 7
     472:	70 94       	com	r7
     474:	77 f8       	bld	r7, 7
     476:	70 94       	com	r7
	d2 = atan2(sd2, cd2);
     478:	a5 01       	movw	r20, r10
     47a:	94 01       	movw	r18, r8
     47c:	c3 01       	movw	r24, r6
     47e:	b2 01       	movw	r22, r4
     480:	64 d5       	rcall	.+2760   	; 0xf4a <atan2>
     482:	6d 87       	std	Y+13, r22	; 0x0d
     484:	7e 87       	std	Y+14, r23	; 0x0e
     486:	8f 87       	std	Y+15, r24	; 0x0f
     488:	98 8b       	std	Y+16, r25	; 0x10

	cd1 = ((l1 + l2 * cd2) * x + (l2 * sd2) * y) / ((l1 + l2 * cd2) * (l1 + l2 * cd2) + (l2 * sd2) * (l2 * sd2));
     48a:	26 e6       	ldi	r18, 0x66	; 102
     48c:	36 e6       	ldi	r19, 0x66	; 102
     48e:	4a e3       	ldi	r20, 0x3A	; 58
     490:	51 e4       	ldi	r21, 0x41	; 65
     492:	c5 01       	movw	r24, r10
     494:	b4 01       	movw	r22, r8
     496:	ff d6       	rcall	.+3582   	; 0x1296 <__mulsf3>
     498:	2d ec       	ldi	r18, 0xCD	; 205
     49a:	3c ec       	ldi	r19, 0xCC	; 204
     49c:	4c e9       	ldi	r20, 0x9C	; 156
     49e:	51 e4       	ldi	r21, 0x41	; 65
     4a0:	e1 d4       	rcall	.+2498   	; 0xe64 <__addsf3>
     4a2:	6d 83       	std	Y+5, r22	; 0x05
     4a4:	7e 83       	std	Y+6, r23	; 0x06
     4a6:	8f 83       	std	Y+7, r24	; 0x07
     4a8:	98 87       	std	Y+8, r25	; 0x08
     4aa:	26 e6       	ldi	r18, 0x66	; 102
     4ac:	36 e6       	ldi	r19, 0x66	; 102
     4ae:	4a e3       	ldi	r20, 0x3A	; 58
     4b0:	51 e4       	ldi	r21, 0x41	; 65
     4b2:	c3 01       	movw	r24, r6
     4b4:	b2 01       	movw	r22, r4
     4b6:	ef d6       	rcall	.+3550   	; 0x1296 <__mulsf3>
     4b8:	4b 01       	movw	r8, r22
     4ba:	5c 01       	movw	r10, r24
     4bc:	2d 81       	ldd	r18, Y+5	; 0x05
     4be:	3e 81       	ldd	r19, Y+6	; 0x06
     4c0:	4f 81       	ldd	r20, Y+7	; 0x07
     4c2:	58 85       	ldd	r21, Y+8	; 0x08
     4c4:	ca 01       	movw	r24, r20
     4c6:	b9 01       	movw	r22, r18
     4c8:	e6 d6       	rcall	.+3532   	; 0x1296 <__mulsf3>
     4ca:	69 87       	std	Y+9, r22	; 0x09
     4cc:	7a 87       	std	Y+10, r23	; 0x0a
     4ce:	8b 87       	std	Y+11, r24	; 0x0b
     4d0:	9c 87       	std	Y+12, r25	; 0x0c
     4d2:	a5 01       	movw	r20, r10
     4d4:	94 01       	movw	r18, r8
     4d6:	c5 01       	movw	r24, r10
     4d8:	b4 01       	movw	r22, r8
     4da:	dd d6       	rcall	.+3514   	; 0x1296 <__mulsf3>
     4dc:	9b 01       	movw	r18, r22
     4de:	ac 01       	movw	r20, r24
     4e0:	69 85       	ldd	r22, Y+9	; 0x09
     4e2:	7a 85       	ldd	r23, Y+10	; 0x0a
     4e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     4e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     4e8:	bd d4       	rcall	.+2426   	; 0xe64 <__addsf3>
     4ea:	69 87       	std	Y+9, r22	; 0x09
     4ec:	7a 87       	std	Y+10, r23	; 0x0a
     4ee:	8b 87       	std	Y+11, r24	; 0x0b
     4f0:	9c 87       	std	Y+12, r25	; 0x0c
	sd1 = ((-1 * l2 * sd2) * x + (l1 + l2 * cd2) * y) / (((l1 + l2 * cd2) * (l1 + l2 * cd2)) + ((l2 * sd2) * (l2 * sd2)));

	//d1 = atan2(y, x) - atan2((l1 + l2 * cd2), l2 * sd2);
	d1 = atan2(sd1, cd1);
     4f2:	2d 81       	ldd	r18, Y+5	; 0x05
     4f4:	3e 81       	ldd	r19, Y+6	; 0x06
     4f6:	4f 81       	ldd	r20, Y+7	; 0x07
     4f8:	58 85       	ldd	r21, Y+8	; 0x08
     4fa:	69 81       	ldd	r22, Y+1	; 0x01
     4fc:	7a 81       	ldd	r23, Y+2	; 0x02
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	9c 81       	ldd	r25, Y+4	; 0x04
     502:	c9 d6       	rcall	.+3474   	; 0x1296 <__mulsf3>
     504:	69 8b       	std	Y+17, r22	; 0x11
     506:	7a 8b       	std	Y+18, r23	; 0x12
     508:	8b 8b       	std	Y+19, r24	; 0x13
     50a:	9c 8b       	std	Y+20, r25	; 0x14
     50c:	a5 01       	movw	r20, r10
     50e:	94 01       	movw	r18, r8
     510:	c7 01       	movw	r24, r14
     512:	b6 01       	movw	r22, r12
     514:	c0 d6       	rcall	.+3456   	; 0x1296 <__mulsf3>
     516:	9b 01       	movw	r18, r22
     518:	ac 01       	movw	r20, r24
     51a:	69 89       	ldd	r22, Y+17	; 0x11
     51c:	7a 89       	ldd	r23, Y+18	; 0x12
     51e:	8b 89       	ldd	r24, Y+19	; 0x13
     520:	9c 89       	ldd	r25, Y+20	; 0x14
     522:	a0 d4       	rcall	.+2368   	; 0xe64 <__addsf3>
     524:	29 85       	ldd	r18, Y+9	; 0x09
     526:	3a 85       	ldd	r19, Y+10	; 0x0a
     528:	4b 85       	ldd	r20, Y+11	; 0x0b
     52a:	5c 85       	ldd	r21, Y+12	; 0x0c
     52c:	61 d5       	rcall	.+2754   	; 0xff0 <__divsf3>
     52e:	4b 01       	movw	r8, r22
     530:	5c 01       	movw	r10, r24
     532:	26 e6       	ldi	r18, 0x66	; 102
     534:	36 e6       	ldi	r19, 0x66	; 102
     536:	4a e3       	ldi	r20, 0x3A	; 58
     538:	51 ec       	ldi	r21, 0xC1	; 193
     53a:	c3 01       	movw	r24, r6
     53c:	b2 01       	movw	r22, r4
     53e:	ab d6       	rcall	.+3414   	; 0x1296 <__mulsf3>
     540:	29 81       	ldd	r18, Y+1	; 0x01
     542:	3a 81       	ldd	r19, Y+2	; 0x02
     544:	4b 81       	ldd	r20, Y+3	; 0x03
     546:	5c 81       	ldd	r21, Y+4	; 0x04
     548:	a6 d6       	rcall	.+3404   	; 0x1296 <__mulsf3>
     54a:	2b 01       	movw	r4, r22
     54c:	3c 01       	movw	r6, r24
     54e:	2d 81       	ldd	r18, Y+5	; 0x05
     550:	3e 81       	ldd	r19, Y+6	; 0x06
     552:	4f 81       	ldd	r20, Y+7	; 0x07
     554:	58 85       	ldd	r21, Y+8	; 0x08
     556:	c7 01       	movw	r24, r14
     558:	b6 01       	movw	r22, r12
     55a:	9d d6       	rcall	.+3386   	; 0x1296 <__mulsf3>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
     560:	c3 01       	movw	r24, r6
     562:	b2 01       	movw	r22, r4
     564:	7f d4       	rcall	.+2302   	; 0xe64 <__addsf3>
     566:	29 85       	ldd	r18, Y+9	; 0x09
     568:	3a 85       	ldd	r19, Y+10	; 0x0a
     56a:	4b 85       	ldd	r20, Y+11	; 0x0b
     56c:	5c 85       	ldd	r21, Y+12	; 0x0c
     56e:	40 d5       	rcall	.+2688   	; 0xff0 <__divsf3>
     570:	a5 01       	movw	r20, r10
     572:	94 01       	movw	r18, r8
     574:	ea d4       	rcall	.+2516   	; 0xf4a <atan2>

	d1 = (57.3) * d1; //라디안
	d2 = (57.3) * d2;

	*pd1 = d1;
     576:	23 e3       	ldi	r18, 0x33	; 51
     578:	33 e3       	ldi	r19, 0x33	; 51
     57a:	45 e6       	ldi	r20, 0x65	; 101
     57c:	52 e4       	ldi	r21, 0x42	; 66
     57e:	8b d6       	rcall	.+3350   	; 0x1296 <__mulsf3>
     580:	ed 89       	ldd	r30, Y+21	; 0x15
     582:	fe 89       	ldd	r31, Y+22	; 0x16
     584:	60 83       	st	Z, r22
     586:	71 83       	std	Z+1, r23	; 0x01
     588:	82 83       	std	Z+2, r24	; 0x02
     58a:	93 83       	std	Z+3, r25	; 0x03
     58c:	23 e3       	ldi	r18, 0x33	; 51
	*pd2 = d2;
     58e:	33 e3       	ldi	r19, 0x33	; 51
     590:	45 e6       	ldi	r20, 0x65	; 101
     592:	52 e4       	ldi	r21, 0x42	; 66
     594:	6d 85       	ldd	r22, Y+13	; 0x0d
     596:	7e 85       	ldd	r23, Y+14	; 0x0e
     598:	8f 85       	ldd	r24, Y+15	; 0x0f
     59a:	98 89       	ldd	r25, Y+16	; 0x10
     59c:	7c d6       	rcall	.+3320   	; 0x1296 <__mulsf3>
     59e:	f8 01       	movw	r30, r16
     5a0:	60 83       	st	Z, r22
     5a2:	71 83       	std	Z+1, r23	; 0x01
     5a4:	82 83       	std	Z+2, r24	; 0x02
     5a6:	93 83       	std	Z+3, r25	; 0x03
     5a8:	66 96       	adiw	r28, 0x16	; 22
     5aa:	0f b6       	in	r0, 0x3f	; 63
}
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	9f 90       	pop	r9
     5ca:	8f 90       	pop	r8
     5cc:	7f 90       	pop	r7
     5ce:	6f 90       	pop	r6
     5d0:	5f 90       	pop	r5
     5d2:	4f 90       	pop	r4
     5d4:	08 95       	ret

000005d6 <UART1_TransNum>:
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17

void UART1_TransNum(int num)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
	if(num < 0){
     5e0:	99 23       	and	r25, r25
     5e2:	3c f4       	brge	.+14     	; 0x5f2 <UART1_TransNum+0x1c>
		UART1_Transmit('-');
     5e4:	8d e2       	ldi	r24, 0x2D	; 45
     5e6:	c6 dd       	rcall	.-1140   	; 0x174 <UART1_Transmit>
		UART1_Transmit('-');
     5e8:	8d e2       	ldi	r24, 0x2D	; 45
     5ea:	c4 dd       	rcall	.-1144   	; 0x174 <UART1_Transmit>
		num = -num;
     5ec:	d1 95       	neg	r29
     5ee:	c1 95       	neg	r28
     5f0:	d1 09       	sbc	r29, r1
	}
	UART1_Transmit(((num % 1000) / 100) + 48);		// 백의 자리 전송
     5f2:	ce 01       	movw	r24, r28
     5f4:	68 ee       	ldi	r22, 0xE8	; 232
     5f6:	73 e0       	ldi	r23, 0x03	; 3
     5f8:	0b d7       	rcall	.+3606   	; 0x1410 <__divmodhi4>
     5fa:	04 e6       	ldi	r16, 0x64	; 100
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	b8 01       	movw	r22, r16
     600:	07 d7       	rcall	.+3598   	; 0x1410 <__divmodhi4>
     602:	80 e3       	ldi	r24, 0x30	; 48
     604:	86 0f       	add	r24, r22
     606:	b6 dd       	rcall	.-1172   	; 0x174 <UART1_Transmit>
	UART1_Transmit(((num % 100) / 10) + 48);		// 십의 자리 전송
     608:	ce 01       	movw	r24, r28
     60a:	b8 01       	movw	r22, r16
     60c:	01 d7       	rcall	.+3586   	; 0x1410 <__divmodhi4>
     60e:	0a e0       	ldi	r16, 0x0A	; 10
     610:	10 e0       	ldi	r17, 0x00	; 0
     612:	b8 01       	movw	r22, r16
     614:	fd d6       	rcall	.+3578   	; 0x1410 <__divmodhi4>
     616:	80 e3       	ldi	r24, 0x30	; 48
     618:	86 0f       	add	r24, r22
	UART1_Transmit((num % 10) + 48);				// 일의 자리 전송
     61a:	ac dd       	rcall	.-1192   	; 0x174 <UART1_Transmit>
     61c:	ce 01       	movw	r24, r28
     61e:	b8 01       	movw	r22, r16
     620:	f7 d6       	rcall	.+3566   	; 0x1410 <__divmodhi4>
     622:	80 5d       	subi	r24, 0xD0	; 208
     624:	a7 dd       	rcall	.-1202   	; 0x174 <UART1_Transmit>
     626:	8d e0       	ldi	r24, 0x0D	; 13
	UART1_Transmit(13);								//ASCII enter
     628:	a5 dd       	rcall	.-1206   	; 0x174 <UART1_Transmit>
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
}
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	08 95       	ret

00000634 <DC_MotorSet>:
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	87 bb       	out	0x17, r24	; 23

void DC_MotorSet()
{
	DDRB = 0xFF; //B포트 출력설정(모터드라이브) -> 0b11111111
	DDRE = 0x0F; //E포트 출력(모터드라이브) -> 0b00001111
     638:	8f e0       	ldi	r24, 0x0F	; 15
     63a:	82 b9       	out	0x02, r24	; 2

	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11)|(0<<WGM10);
     63c:	82 ea       	ldi	r24, 0xA2	; 162
     63e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(0<<CS02)|(0<<CS01)|(1<<CS00);
     640:	89 e1       	ldi	r24, 0x19	; 25
     642:	8e bd       	out	0x2e, r24	; 46
     644:	08 95       	ret

00000646 <TC0Set>:
}
//Timer/Counter 0,1번
void TC0Set()
{

	TCCR0 = (0<<WGM01)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(1<<CS02)|(1<<CS01)|(0<<CS00); //(WGM01,WGM00)->0,0(Normal Mode) /(COM01,COM00)->0,0(Normal Mode)(WGM01,WGM00)->0,0(Normal Mode) ,CS는 256분주비 설정
     646:	86 e0       	ldi	r24, 0x06	; 6
     648:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0)|(1<<TOIE1); //EIMSK처럼 Interrupt Enable	
     64a:	85 e0       	ldi	r24, 0x05	; 5
     64c:	87 bf       	out	0x37, r24	; 55
									//(WGM01,WGM00)->0,0(Normal Mode) ,CS는 256분주비 설정
	TCNT0 = 131; //131로 TCNT설정 //T(desired) = 2ms
     64e:	83 e8       	ldi	r24, 0x83	; 131
     650:	82 bf       	out	0x32, r24	; 50
     652:	08 95       	ret

00000654 <__vector_30>:
char num4[20];

int c1 = 0, c2 = 0, c3 = 0, c4 = 0; //coordinate 1,2 //전역변수

ISR(USART1_RX_vect) //UART1 interrupt
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	0b b6       	in	r0, 0x3b	; 59
     660:	0f 92       	push	r0
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	2f 93       	push	r18
     66c:	3f 93       	push	r19
     66e:	4f 93       	push	r20
     670:	5f 93       	push	r21
     672:	6f 93       	push	r22
     674:	7f 93       	push	r23
     676:	8f 93       	push	r24
     678:	9f 93       	push	r25
     67a:	af 93       	push	r26
     67c:	bf 93       	push	r27
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31

	RXbuffer[i] = UART1_Receive();
     686:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <i>
     68a:	d0 91 1f 01 	lds	r29, 0x011F	; 0x80011f <i+0x1>
     68e:	7a dd       	rcall	.-1292   	; 0x184 <UART1_Receive>
     690:	c6 5b       	subi	r28, 0xB6	; 182
     692:	de 4f       	sbci	r29, 0xFE	; 254
     694:	88 83       	st	Y, r24

	if(RXbuffer[i] == 'S') //시작 알림
     696:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <i>
     69a:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <i+0x1>
     69e:	f9 01       	movw	r30, r18
     6a0:	e6 5b       	subi	r30, 0xB6	; 182
     6a2:	fe 4f       	sbci	r31, 0xFE	; 254
     6a4:	80 81       	ld	r24, Z
     6a6:	83 35       	cpi	r24, 0x53	; 83
     6a8:	29 f4       	brne	.+10     	; 0x6b4 <__vector_30+0x60>
	start_i = i;
     6aa:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <start_i+0x1>
     6ae:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <start_i>
     6b2:	f6 c0       	rjmp	.+492    	; 0x8a0 <__vector_30+0x24c>

	else if(RXbuffer[i] == ',') //x, y 좌표 구분
     6b4:	8c 32       	cpi	r24, 0x2C	; 44
     6b6:	29 f4       	brne	.+10     	; 0x6c2 <__vector_30+0x6e>
	cut_i = i;
     6b8:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <cut_i+0x1>
     6bc:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <cut_i>
     6c0:	ef c0       	rjmp	.+478    	; 0x8a0 <__vector_30+0x24c>

	else if(RXbuffer[i] == '/')
     6c2:	8f 32       	cpi	r24, 0x2F	; 47
     6c4:	29 f4       	brne	.+10     	; 0x6d0 <__vector_30+0x7c>
	cut2_i = i;
     6c6:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <cut2_i+0x1>
     6ca:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <cut2_i>
     6ce:	e8 c0       	rjmp	.+464    	; 0x8a0 <__vector_30+0x24c>

	else if(RXbuffer[i] == '-')
     6d0:	8d 32       	cpi	r24, 0x2D	; 45
     6d2:	29 f4       	brne	.+10     	; 0x6de <__vector_30+0x8a>
	cut3_i = i;
     6d4:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <cut3_i+0x1>
     6d8:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <cut3_i>
     6dc:	e1 c0       	rjmp	.+450    	; 0x8a0 <__vector_30+0x24c>

	else if(RXbuffer[i] == 'E') //끝 알림
     6de:	85 34       	cpi	r24, 0x45	; 69
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <__vector_30+0x90>
     6e2:	de c0       	rjmp	.+444    	; 0x8a0 <__vector_30+0x24c>
	{
		End_i = i;
     6e4:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <End_i+0x1>
     6e8:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <End_i>
		RXbuffer[i+1] = 0;
     6ec:	f9 01       	movw	r30, r18
     6ee:	e6 5b       	subi	r30, 0xB6	; 182
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	11 82       	std	Z+1, r1	; 0x01

		for(i = start_i+1; i < cut_i; i++)
     6f4:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <start_i>
     6f8:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <start_i+0x1>
     6fc:	c8 01       	movw	r24, r16
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <cut_i>
     704:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <cut_i+0x1>
     708:	86 17       	cp	r24, r22
     70a:	97 07       	cpc	r25, r23
     70c:	dc f4       	brge	.+54     	; 0x744 <__vector_30+0xf0>
     70e:	f8 01       	movw	r30, r16
     710:	e5 5b       	subi	r30, 0xB5	; 181
     712:	fe 4f       	sbci	r31, 0xFE	; 254
     714:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <j>
     718:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <j+0x1>
     71c:	de 01       	movw	r26, r28
     71e:	a2 56       	subi	r26, 0x62	; 98
     720:	be 4f       	sbci	r27, 0xFE	; 254
     722:	ab 01       	movw	r20, r22
     724:	46 5b       	subi	r20, 0xB6	; 182
     726:	5e 4f       	sbci	r21, 0xFE	; 254
		num1[j++] = RXbuffer[i];
     728:	81 91       	ld	r24, Z+
     72a:	8d 93       	st	X+, r24
	else if(RXbuffer[i] == 'E') //끝 알림
	{
		End_i = i;
		RXbuffer[i+1] = 0;

		for(i = start_i+1; i < cut_i; i++)
     72c:	e4 17       	cp	r30, r20
     72e:	f5 07       	cpc	r31, r21
     730:	d9 f7       	brne	.-10     	; 0x728 <__vector_30+0xd4>
     732:	c6 0f       	add	r28, r22
     734:	d7 1f       	adc	r29, r23
     736:	21 97       	sbiw	r28, 0x01	; 1
     738:	c0 1b       	sub	r28, r16
     73a:	d1 0b       	sbc	r29, r17
     73c:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <j+0x1>
     740:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <j>
		num1[j++] = RXbuffer[i];
		
		num1[j] = 0;
     744:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <j>
     748:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <j+0x1>
     74c:	e2 56       	subi	r30, 0x62	; 98
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	10 82       	st	Z, r1
		j = 0;
     752:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <j+0x1>
     756:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <j>

		for(i = cut_i+1; i < cut2_i; i++)
     75a:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <cut2_i>
     75e:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <cut2_i+0x1>
     762:	cb 01       	movw	r24, r22
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	8c 17       	cp	r24, r28
     768:	9d 07       	cpc	r25, r29
     76a:	ac f4       	brge	.+42     	; 0x796 <__vector_30+0x142>
     76c:	fb 01       	movw	r30, r22
     76e:	e5 5b       	subi	r30, 0xB5	; 181
     770:	fe 4f       	sbci	r31, 0xFE	; 254
     772:	aa e8       	ldi	r26, 0x8A	; 138
     774:	b1 e0       	ldi	r27, 0x01	; 1
     776:	ae 01       	movw	r20, r28
     778:	46 5b       	subi	r20, 0xB6	; 182
     77a:	5e 4f       	sbci	r21, 0xFE	; 254
		num2[j++] = RXbuffer[i];
     77c:	81 91       	ld	r24, Z+
     77e:	8d 93       	st	X+, r24
		num1[j++] = RXbuffer[i];
		
		num1[j] = 0;
		j = 0;

		for(i = cut_i+1; i < cut2_i; i++)
     780:	e4 17       	cp	r30, r20
     782:	f5 07       	cpc	r31, r21
     784:	d9 f7       	brne	.-10     	; 0x77c <__vector_30+0x128>
     786:	ce 01       	movw	r24, r28
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	86 1b       	sub	r24, r22
     78c:	97 0b       	sbc	r25, r23
     78e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <j+0x1>
     792:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <j>
		num2[j++] = RXbuffer[i];

		num2[j] = 0;
     796:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <j>
     79a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <j+0x1>
     79e:	e6 57       	subi	r30, 0x76	; 118
     7a0:	fe 4f       	sbci	r31, 0xFE	; 254
     7a2:	10 82       	st	Z, r1
		j = 0;
     7a4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <j+0x1>
     7a8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <j>

		for(i = cut2_i+1; i < cut3_i; i++)
     7ac:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <cut3_i>
     7b0:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <cut3_i+0x1>
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	86 17       	cp	r24, r22
     7ba:	97 07       	cpc	r25, r23
     7bc:	ac f4       	brge	.+42     	; 0x7e8 <__vector_30+0x194>
     7be:	fe 01       	movw	r30, r28
     7c0:	e5 5b       	subi	r30, 0xB5	; 181
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254
     7c4:	a0 e2       	ldi	r26, 0x20	; 32
     7c6:	b1 e0       	ldi	r27, 0x01	; 1
     7c8:	ab 01       	movw	r20, r22
     7ca:	46 5b       	subi	r20, 0xB6	; 182
     7cc:	5e 4f       	sbci	r21, 0xFE	; 254
		num3[j++] = RXbuffer[i];
     7ce:	81 91       	ld	r24, Z+
     7d0:	8d 93       	st	X+, r24
		num2[j++] = RXbuffer[i];

		num2[j] = 0;
		j = 0;

		for(i = cut2_i+1; i < cut3_i; i++)
     7d2:	e4 17       	cp	r30, r20
     7d4:	f5 07       	cpc	r31, r21
     7d6:	d9 f7       	brne	.-10     	; 0x7ce <__vector_30+0x17a>
     7d8:	cb 01       	movw	r24, r22
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	8c 1b       	sub	r24, r28
     7de:	9d 0b       	sbc	r25, r29
     7e0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <j+0x1>
     7e4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <j>
		num3[j++] = RXbuffer[i];

		num3[j] = 0;
     7e8:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <j>
     7ec:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <j+0x1>
     7f0:	e0 5e       	subi	r30, 0xE0	; 224
     7f2:	fe 4f       	sbci	r31, 0xFE	; 254
     7f4:	10 82       	st	Z, r1
		j = 0;
     7f6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <j+0x1>
     7fa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <j>

		for(i = cut3_i+1; i<End_i; i++)
     7fe:	eb 01       	movw	r28, r22
     800:	21 96       	adiw	r28, 0x01	; 1
     802:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <i+0x1>
     806:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <i>
     80a:	c2 17       	cp	r28, r18
     80c:	d3 07       	cpc	r29, r19
     80e:	f4 f4       	brge	.+60     	; 0x84c <__vector_30+0x1f8>
     810:	fb 01       	movw	r30, r22
     812:	e5 5b       	subi	r30, 0xB5	; 181
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	a4 e3       	ldi	r26, 0x34	; 52
     818:	b1 e0       	ldi	r27, 0x01	; 1
     81a:	a9 01       	movw	r20, r18
     81c:	46 5b       	subi	r20, 0xB6	; 182
     81e:	5e 4f       	sbci	r21, 0xFE	; 254
		num4[j++] = RXbuffer[i];
     820:	81 91       	ld	r24, Z+
     822:	8d 93       	st	X+, r24
		num3[j++] = RXbuffer[i];

		num3[j] = 0;
		j = 0;

		for(i = cut3_i+1; i<End_i; i++)
     824:	e4 17       	cp	r30, r20
     826:	f5 07       	cpc	r31, r21
     828:	d9 f7       	brne	.-10     	; 0x820 <__vector_30+0x1cc>
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	31 09       	sbc	r19, r1
     82e:	c9 01       	movw	r24, r18
     830:	86 1b       	sub	r24, r22
     832:	97 0b       	sbc	r25, r23
     834:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <j+0x1>
     838:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <j>
     83c:	2c 0f       	add	r18, r28
     83e:	3d 1f       	adc	r19, r29
     840:	26 1b       	sub	r18, r22
     842:	37 0b       	sbc	r19, r23
     844:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <i+0x1>
     848:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <i>
		num4[j++] = RXbuffer[i];

		num4[j] = 0;
     84c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <j>
     850:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <j+0x1>
     854:	ec 5c       	subi	r30, 0xCC	; 204
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	10 82       	st	Z, r1
		j = 0;
     85a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <j+0x1>
     85e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <j>
		int real_num1 = 0;
		int real_num2 = 0;
		int real_num3 = 0;
		int real_num4 = 0;

		real_num1 = atoi(num1);
     862:	8e e9       	ldi	r24, 0x9E	; 158
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	fb d5       	rcall	.+3062   	; 0x145e <atoi>
     868:	7c 01       	movw	r14, r24
		real_num2 = atoi(num2);
     86a:	8a e8       	ldi	r24, 0x8A	; 138
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	f7 d5       	rcall	.+3054   	; 0x145e <atoi>
     870:	8c 01       	movw	r16, r24
		real_num3 = atoi(num3);
     872:	80 e2       	ldi	r24, 0x20	; 32
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	f3 d5       	rcall	.+3046   	; 0x145e <atoi>
     878:	ec 01       	movw	r28, r24
		real_num4 = atoi(num4);
     87a:	84 e3       	ldi	r24, 0x34	; 52
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	ef d5       	rcall	.+3038   	; 0x145e <atoi>
     880:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <c1+0x1>

		c1 = real_num1; //전역변수로 전달
     884:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <c1>
     888:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <c2+0x1>
		c2 = real_num2;
     88c:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <c2>
     890:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <c3+0x1>
		c3 = real_num3;
     894:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <c3>
     898:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <c4+0x1>
		c4 = real_num4;
     89c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <c4>
     8a0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <i>
	}
	i++;
     8a4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <i+0x1>
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <i+0x1>
     8ae:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <i>
     8b2:	ff 91       	pop	r31
}
     8b4:	ef 91       	pop	r30
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	0f 90       	pop	r0
     8d8:	0b be       	out	0x3b, r0	; 59
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti

000008e4 <__vector_1>:
     8e4:	1f 92       	push	r1

int flag = 0; //전역변수

ISR(INT0_vect) //0번 스위치
{
     8e6:	0f 92       	push	r0
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	0f 92       	push	r0
     8ec:	11 24       	eor	r1, r1
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
	flag = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <flag+0x1>
     8fa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flag>
	//PORTA = 0xf0;
}
     8fe:	9f 91       	pop	r25
     900:	8f 91       	pop	r24
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_2>:
ISR(INT1_vect) //1번 스위치
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
	flag = 1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <flag+0x1>
     922:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <flag>
	//PORTA = 0x0f;
}
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <IntSet>:

void IntSet() //Switch Resister 세팅
{
	EICRA =	(1<<ISC01)|(0<<ISC00)|(1<<ISC11)|(0<<ISC10); //falling Edge
     934:	8a e0       	ldi	r24, 0x0A	; 10
     936:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	//EICRB = (1<<ISC41)|(0<<ISC40)|(1<<ISC61)|(0<<ISC60); //falling Edge
	EIMSK = (1<<INT1)|(1<<INT0); //인터럽트 0번~7번을 어디에 사용할것인지, INT0,INT1 허용  (1<<INT4)(1<<INT6)
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	89 bf       	out	0x39, r24	; 57
     93e:	08 95       	ret

00000940 <__vector_16>:
#define AX_Right_angle 200

double d1 = 0, d2 = 0;
int cnt;
ISR(TIMER0_OVF_vect) //Dynamixel
{
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	0b b6       	in	r0, 0x3b	; 59
     94c:	0f 92       	push	r0
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
		cnt++;
     966:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cnt>
     96a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cnt+0x1>
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cnt+0x1>
     974:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cnt>
		TCNT0 = 131;
     978:	83 e8       	ldi	r24, 0x83	; 131
     97a:	82 bf       	out	0x32, r24	; 50


		if(cnt == 200){ //600ms
     97c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cnt>
     980:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cnt+0x1>
     984:	88 3c       	cpi	r24, 0xC8	; 200
     986:	91 05       	cpc	r25, r1
     988:	09 f0       	breq	.+2      	; 0x98c <__vector_16+0x4c>
     98a:	e2 c1       	rjmp	.+964    	; 0xd50 <__vector_16+0x410>
				
			if(c2 == 0){
     98c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <c2>
     990:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <c2+0x1>
     994:	61 15       	cp	r22, r1
     996:	71 05       	cpc	r23, r1
     998:	09 f5       	brne	.+66     	; 0x9dc <__vector_16+0x9c>
				
				Dynamixel_Moving(0x02, 0x96, 512);
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	52 e0       	ldi	r21, 0x02	; 2
     99e:	66 e9       	ldi	r22, 0x96	; 150
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	ab db       	rcall	.-2218   	; 0xfe <Dynamixel_Moving>
				Dynamixel_Moving(0x03, 0x96, 512);
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	52 e0       	ldi	r21, 0x02	; 2
     9ac:	66 e9       	ldi	r22, 0x96	; 150
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a4 db       	rcall	.-2232   	; 0xfe <Dynamixel_Moving>
				

				UART1_Transmit('d');
     9b6:	84 e6       	ldi	r24, 0x64	; 100
     9b8:	dd db       	rcall	.-2118   	; 0x174 <UART1_Transmit>
				UART1_Transmit('e');
     9ba:	85 e6       	ldi	r24, 0x65	; 101
     9bc:	db db       	rcall	.-2122   	; 0x174 <UART1_Transmit>
				UART1_Transmit('f');
     9be:	86 e6       	ldi	r24, 0x66	; 102
     9c0:	d9 db       	rcall	.-2126   	; 0x174 <UART1_Transmit>
				UART1_Transmit('a');
     9c2:	81 e6       	ldi	r24, 0x61	; 97
     9c4:	d7 db       	rcall	.-2130   	; 0x174 <UART1_Transmit>
				UART1_Transmit('u');
     9c6:	85 e7       	ldi	r24, 0x75	; 117
     9c8:	d5 db       	rcall	.-2134   	; 0x174 <UART1_Transmit>
     9ca:	8c e6       	ldi	r24, 0x6C	; 108
				UART1_Transmit('l');
     9cc:	d3 db       	rcall	.-2138   	; 0x174 <UART1_Transmit>
     9ce:	84 e7       	ldi	r24, 0x74	; 116
     9d0:	d1 db       	rcall	.-2142   	; 0x174 <UART1_Transmit>
				UART1_Transmit('t');
     9d2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cnt+0x1>
     9d6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cnt>

				cnt = 0;
     9da:	a8 c1       	rjmp	.+848    	; 0xd2c <__vector_16+0x3ec>
     9dc:	16 16       	cp	r1, r22
     9de:	17 06       	cpc	r1, r23
     9e0:	0c f0       	brlt	.+2      	; 0x9e4 <__vector_16+0xa4>
			}
			else if(c2 > 0){ //1사분면
     9e2:	c6 c0       	rjmp	.+396    	; 0xb70 <__vector_16+0x230>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	31 e0       	ldi	r19, 0x01	; 1

				degree_manipulator(c1, c2, &d1, &d2); //Plus 연산
     9e8:	44 e0       	ldi	r20, 0x04	; 4
     9ea:	51 e0       	ldi	r21, 0x01	; 1
     9ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <c1>
     9f0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <c1+0x1>
     9f4:	cf db       	rcall	.-2146   	; 0x194 <degree_manipulator>
				UART1_Transmit('d');
     9f6:	84 e6       	ldi	r24, 0x64	; 100
     9f8:	bd db       	rcall	.-2182   	; 0x174 <UART1_Transmit>
     9fa:	81 e3       	ldi	r24, 0x31	; 49
				UART1_Transmit('1');
     9fc:	bb db       	rcall	.-2186   	; 0x174 <UART1_Transmit>
     9fe:	8d e3       	ldi	r24, 0x3D	; 61
				UART1_Transmit('=');
     a00:	b9 db       	rcall	.-2190   	; 0x174 <UART1_Transmit>
     a02:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <d1>
				UART1_TransNum(d1);
     a06:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <d1+0x1>
     a0a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <d1+0x2>
     a0e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <d1+0x3>
     a12:	56 d3       	rcall	.+1708   	; 0x10c0 <__fixsfsi>
     a14:	cb 01       	movw	r24, r22
     a16:	df dd       	rcall	.-1090   	; 0x5d6 <UART1_TransNum>
     a18:	84 e6       	ldi	r24, 0x64	; 100
				UART1_Transmit('d');
     a1a:	ac db       	rcall	.-2216   	; 0x174 <UART1_Transmit>
     a1c:	82 e3       	ldi	r24, 0x32	; 50
				UART1_Transmit('2');
     a1e:	aa db       	rcall	.-2220   	; 0x174 <UART1_Transmit>
     a20:	8d e3       	ldi	r24, 0x3D	; 61
     a22:	a8 db       	rcall	.-2224   	; 0x174 <UART1_Transmit>
				UART1_Transmit('=');
     a24:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a28:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				UART1_TransNum(d2);
     a2c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     a30:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     a34:	45 d3       	rcall	.+1674   	; 0x10c0 <__fixsfsi>
     a36:	cb 01       	movw	r24, r22
     a38:	ce dd       	rcall	.-1124   	; 0x5d6 <UART1_TransNum>
     a3a:	24 ea       	ldi	r18, 0xA4	; 164
     a3c:	30 e7       	ldi	r19, 0x70	; 112
     a3e:	4d e5       	ldi	r20, 0x5D	; 93
     a40:	50 e4       	ldi	r21, 0x40	; 64

				Dynamixel_Moving(0x02, 0x96, (AX_MID-(d1 * 3.46))); //ID, speed, Position
     a42:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <d1>
     a46:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <d1+0x1>
     a4a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <d1+0x2>
     a4e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <d1+0x3>
     a52:	21 d4       	rcall	.+2114   	; 0x1296 <__mulsf3>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	94 e4       	ldi	r25, 0x44	; 68
     a60:	00 d2       	rcall	.+1024   	; 0xe62 <__subsf3>
     a62:	2e d3       	rcall	.+1628   	; 0x10c0 <__fixsfsi>
     a64:	ab 01       	movw	r20, r22
     a66:	66 e9       	ldi	r22, 0x96	; 150
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	47 db       	rcall	.-2418   	; 0xfe <Dynamixel_Moving>
     a70:	8d e6       	ldi	r24, 0x6D	; 109
     a72:	80 db       	rcall	.-2304   	; 0x174 <UART1_Transmit>
				UART1_Transmit('m');
     a74:	81 e3       	ldi	r24, 0x31	; 49
     a76:	7e db       	rcall	.-2308   	; 0x174 <UART1_Transmit>
				UART1_Transmit('1');
     a78:	8d e3       	ldi	r24, 0x3D	; 61
     a7a:	7c db       	rcall	.-2312   	; 0x174 <UART1_Transmit>
				UART1_Transmit('=');
     a7c:	24 ea       	ldi	r18, 0xA4	; 164
     a7e:	30 e7       	ldi	r19, 0x70	; 112
     a80:	4d e5       	ldi	r20, 0x5D	; 93
				UART1_TransNum(AX_MID-(d1 * 3.46));
     a82:	50 e4       	ldi	r21, 0x40	; 64
     a84:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <d1>
     a88:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <d1+0x1>
     a8c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <d1+0x2>
     a90:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <d1+0x3>
     a94:	00 d4       	rcall	.+2048   	; 0x1296 <__mulsf3>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	94 e4       	ldi	r25, 0x44	; 68
     aa2:	df d1       	rcall	.+958    	; 0xe62 <__subsf3>
     aa4:	0d d3       	rcall	.+1562   	; 0x10c0 <__fixsfsi>
     aa6:	cb 01       	movw	r24, r22
     aa8:	96 dd       	rcall	.-1236   	; 0x5d6 <UART1_TransNum>
     aaa:	24 ea       	ldi	r18, 0xA4	; 164
     aac:	30 e7       	ldi	r19, 0x70	; 112

				Dynamixel_Moving(0x03, 0x96, AX_MID + (d2 * 3.46)); //speed 24%, 중간 //0x3FF -> 1023, 0x1FF -> 511
     aae:	4d e5       	ldi	r20, 0x5D	; 93
     ab0:	50 e4       	ldi	r21, 0x40	; 64
     ab2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ab6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     aba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     abe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     ac2:	e9 d3       	rcall	.+2002   	; 0x1296 <__mulsf3>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	54 e4       	ldi	r21, 0x44	; 68
     acc:	cb d1       	rcall	.+918    	; 0xe64 <__addsf3>
     ace:	f8 d2       	rcall	.+1520   	; 0x10c0 <__fixsfsi>
     ad0:	ab 01       	movw	r20, r22
     ad2:	66 e9       	ldi	r22, 0x96	; 150
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	11 db       	rcall	.-2526   	; 0xfe <Dynamixel_Moving>
     adc:	8d e6       	ldi	r24, 0x6D	; 109
     ade:	4a db       	rcall	.-2412   	; 0x174 <UART1_Transmit>
				UART1_Transmit('m');
     ae0:	82 e3       	ldi	r24, 0x32	; 50
     ae2:	48 db       	rcall	.-2416   	; 0x174 <UART1_Transmit>
     ae4:	8d e3       	ldi	r24, 0x3D	; 61
				UART1_Transmit('2');
     ae6:	46 db       	rcall	.-2420   	; 0x174 <UART1_Transmit>
     ae8:	24 ea       	ldi	r18, 0xA4	; 164
				UART1_Transmit('=');
     aea:	30 e7       	ldi	r19, 0x70	; 112
     aec:	4d e5       	ldi	r20, 0x5D	; 93
				UART1_TransNum(AX_MID + (d2 * 3.46));
     aee:	50 e4       	ldi	r21, 0x40	; 64
     af0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     af4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     af8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     afc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     b00:	ca d3       	rcall	.+1940   	; 0x1296 <__mulsf3>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	54 e4       	ldi	r21, 0x44	; 68
     b0a:	ac d1       	rcall	.+856    	; 0xe64 <__addsf3>
     b0c:	d9 d2       	rcall	.+1458   	; 0x10c0 <__fixsfsi>
     b0e:	cb 01       	movw	r24, r22
     b10:	62 dd       	rcall	.-1340   	; 0x5d6 <UART1_TransNum>
     b12:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <c3>

					if(c3 == 1){
     b16:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <c3+0x1>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	91 05       	cpc	r25, r1
     b1e:	89 f4       	brne	.+34     	; 0xb42 <__vector_16+0x202>
     b20:	4f ef       	ldi	r20, 0xFF	; 255
						Dynamixel_Moving(0x04, 0x96, 767);
     b22:	52 e0       	ldi	r21, 0x02	; 2
     b24:	66 e9       	ldi	r22, 0x96	; 150
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	e8 da       	rcall	.-2608   	; 0xfe <Dynamixel_Moving>
     b2e:	8d e6       	ldi	r24, 0x6D	; 109
     b30:	21 db       	rcall	.-2494   	; 0x174 <UART1_Transmit>
						UART1_Transmit('m');
     b32:	83 e3       	ldi	r24, 0x33	; 51
     b34:	1f db       	rcall	.-2498   	; 0x174 <UART1_Transmit>
						UART1_Transmit('3');
     b36:	8d e3       	ldi	r24, 0x3D	; 61
     b38:	1d db       	rcall	.-2502   	; 0x174 <UART1_Transmit>
						UART1_Transmit('=');
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	92 e0       	ldi	r25, 0x02	; 2
						UART1_TransNum(767);
     b3e:	4b dd       	rcall	.-1386   	; 0x5d6 <UART1_TransNum>
     b40:	12 c0       	rjmp	.+36     	; 0xb66 <__vector_16+0x226>
     b42:	89 2b       	or	r24, r25
     b44:	81 f4       	brne	.+32     	; 0xb66 <__vector_16+0x226>
     b46:	42 ec       	ldi	r20, 0xC2	; 194
					}
					else if(c3 == 0){
     b48:	51 e0       	ldi	r21, 0x01	; 1
     b4a:	66 e9       	ldi	r22, 0x96	; 150
						Dynamixel_Moving(0x04, 0x96, 450);
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	d5 da       	rcall	.-2646   	; 0xfe <Dynamixel_Moving>
     b54:	8d e6       	ldi	r24, 0x6D	; 109
						UART1_Transmit('m');
     b56:	0e db       	rcall	.-2532   	; 0x174 <UART1_Transmit>
     b58:	83 e3       	ldi	r24, 0x33	; 51
						UART1_Transmit('3');
     b5a:	0c db       	rcall	.-2536   	; 0x174 <UART1_Transmit>
     b5c:	8d e3       	ldi	r24, 0x3D	; 61
     b5e:	0a db       	rcall	.-2540   	; 0x174 <UART1_Transmit>
						UART1_Transmit('=');
     b60:	82 ec       	ldi	r24, 0xC2	; 194
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	38 dd       	rcall	.-1424   	; 0x5d6 <UART1_TransNum>
						UART1_TransNum(450);
     b66:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cnt+0x1>
					}
					else;

				cnt = 0;
     b6a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cnt>
     b6e:	de c0       	rjmp	.+444    	; 0xd2c <__vector_16+0x3ec>
     b70:	77 23       	and	r23, r23
     b72:	0c f0       	brlt	.+2      	; 0xb76 <__vector_16+0x236>

			}
			else if(c2 < 0){ //4사분면
     b74:	db c0       	rjmp	.+438    	; 0xd2c <__vector_16+0x3ec>
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	31 e0       	ldi	r19, 0x01	; 1

			minus_degree_manipulator(c1, c2, &d1, &d2); //minus 연산
     b7a:	44 e0       	ldi	r20, 0x04	; 4
     b7c:	51 e0       	ldi	r21, 0x01	; 1
     b7e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <c1>
     b82:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <c1+0x1>
     b86:	15 dc       	rcall	.-2006   	; 0x3b2 <minus_degree_manipulator>
     b88:	84 e6       	ldi	r24, 0x64	; 100
     b8a:	f4 da       	rcall	.-2584   	; 0x174 <UART1_Transmit>
     b8c:	81 e3       	ldi	r24, 0x31	; 49
			UART1_Transmit('d');
     b8e:	f2 da       	rcall	.-2588   	; 0x174 <UART1_Transmit>
     b90:	8d e3       	ldi	r24, 0x3D	; 61
     b92:	f0 da       	rcall	.-2592   	; 0x174 <UART1_Transmit>
			UART1_Transmit('1');
     b94:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <d1>
			UART1_Transmit('=');
     b98:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <d1+0x1>
     b9c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <d1+0x2>
			UART1_TransNum(d1);
     ba0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <d1+0x3>
     ba4:	8d d2       	rcall	.+1306   	; 0x10c0 <__fixsfsi>
     ba6:	cb 01       	movw	r24, r22
     ba8:	16 dd       	rcall	.-1492   	; 0x5d6 <UART1_TransNum>
     baa:	84 e6       	ldi	r24, 0x64	; 100
     bac:	e3 da       	rcall	.-2618   	; 0x174 <UART1_Transmit>
     bae:	82 e3       	ldi	r24, 0x32	; 50
			UART1_Transmit('d');
     bb0:	e1 da       	rcall	.-2622   	; 0x174 <UART1_Transmit>
     bb2:	8d e3       	ldi	r24, 0x3D	; 61
			UART1_Transmit('2');
     bb4:	df da       	rcall	.-2626   	; 0x174 <UART1_Transmit>
     bb6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			UART1_Transmit('=');
     bba:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bbe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			UART1_TransNum(d2);
     bc2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     bc6:	7c d2       	rcall	.+1272   	; 0x10c0 <__fixsfsi>
     bc8:	cb 01       	movw	r24, r22
     bca:	05 dd       	rcall	.-1526   	; 0x5d6 <UART1_TransNum>
     bcc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <d1>
     bd0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <d1+0x1>
				
			d1 = -d1;
     bd4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <d1+0x2>
     bd8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <d1+0x3>
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	90 58       	subi	r25, 0x80	; 128
     be2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <d1>
     be6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <d1+0x1>
     bea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <d1+0x2>
     bee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <d1+0x3>
     bf2:	24 ea       	ldi	r18, 0xA4	; 164
     bf4:	30 e7       	ldi	r19, 0x70	; 112
     bf6:	4d e5       	ldi	r20, 0x5D	; 93
     bf8:	50 e4       	ldi	r21, 0x40	; 64
			Dynamixel_Moving(0x02, 0x96, (AX_MID+(d1 * 3.46)));
     bfa:	4d d3       	rcall	.+1690   	; 0x1296 <__mulsf3>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	54 e4       	ldi	r21, 0x44	; 68
     c04:	2f d1       	rcall	.+606    	; 0xe64 <__addsf3>
     c06:	5c d2       	rcall	.+1208   	; 0x10c0 <__fixsfsi>
     c08:	ab 01       	movw	r20, r22
     c0a:	66 e9       	ldi	r22, 0x96	; 150
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	75 da       	rcall	.-2838   	; 0xfe <Dynamixel_Moving>
     c14:	8d e6       	ldi	r24, 0x6D	; 109
     c16:	ae da       	rcall	.-2724   	; 0x174 <UART1_Transmit>
     c18:	81 e3       	ldi	r24, 0x31	; 49
     c1a:	ac da       	rcall	.-2728   	; 0x174 <UART1_Transmit>
     c1c:	8d e3       	ldi	r24, 0x3D	; 61
			UART1_Transmit('m');
     c1e:	aa da       	rcall	.-2732   	; 0x174 <UART1_Transmit>
     c20:	24 ea       	ldi	r18, 0xA4	; 164
			UART1_Transmit('1');
     c22:	30 e7       	ldi	r19, 0x70	; 112
     c24:	4d e5       	ldi	r20, 0x5D	; 93
			UART1_Transmit('=');
     c26:	50 e4       	ldi	r21, 0x40	; 64
     c28:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <d1>
			UART1_TransNum((AX_MID+(d1 * 3.46)));
     c2c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <d1+0x1>
     c30:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <d1+0x2>
     c34:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <d1+0x3>
     c38:	2e d3       	rcall	.+1628   	; 0x1296 <__mulsf3>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	54 e4       	ldi	r21, 0x44	; 68
     c42:	10 d1       	rcall	.+544    	; 0xe64 <__addsf3>
     c44:	3d d2       	rcall	.+1146   	; 0x10c0 <__fixsfsi>
     c46:	cb 01       	movw	r24, r22
     c48:	c6 dc       	rcall	.-1652   	; 0x5d6 <UART1_TransNum>
     c4a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c4e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c52:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>

			d2 = -d2;
     c56:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c5a:	bc 01       	movw	r22, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	90 58       	subi	r25, 0x80	; 128
     c60:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     c64:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c68:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     c6c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     c70:	24 ea       	ldi	r18, 0xA4	; 164
     c72:	30 e7       	ldi	r19, 0x70	; 112
			Dynamixel_Moving(0x03, 0x96, AX_MID - (d2 * 3.46)); //speed 24%, 중간 //0x3FF -> 1023, 0x1FF -> 511
     c74:	4d e5       	ldi	r20, 0x5D	; 93
     c76:	50 e4       	ldi	r21, 0x40	; 64
     c78:	0e d3       	rcall	.+1564   	; 0x1296 <__mulsf3>
     c7a:	9b 01       	movw	r18, r22
     c7c:	ac 01       	movw	r20, r24
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	94 e4       	ldi	r25, 0x44	; 68
     c86:	ed d0       	rcall	.+474    	; 0xe62 <__subsf3>
     c88:	1b d2       	rcall	.+1078   	; 0x10c0 <__fixsfsi>
     c8a:	ab 01       	movw	r20, r22
     c8c:	66 e9       	ldi	r22, 0x96	; 150
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	34 da       	rcall	.-2968   	; 0xfe <Dynamixel_Moving>
     c96:	8d e6       	ldi	r24, 0x6D	; 109
			UART1_Transmit('m');
     c98:	6d da       	rcall	.-2854   	; 0x174 <UART1_Transmit>
     c9a:	82 e3       	ldi	r24, 0x32	; 50
     c9c:	6b da       	rcall	.-2858   	; 0x174 <UART1_Transmit>
			UART1_Transmit('2');
     c9e:	8d e3       	ldi	r24, 0x3D	; 61
     ca0:	69 da       	rcall	.-2862   	; 0x174 <UART1_Transmit>
     ca2:	24 ea       	ldi	r18, 0xA4	; 164
			UART1_Transmit('=');
     ca4:	30 e7       	ldi	r19, 0x70	; 112
     ca6:	4d e5       	ldi	r20, 0x5D	; 93
     ca8:	50 e4       	ldi	r21, 0x40	; 64
			UART1_TransNum(AX_MID - (d2 * 3.46));
     caa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cae:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cb2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     cb6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     cba:	ed d2       	rcall	.+1498   	; 0x1296 <__mulsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	94 e4       	ldi	r25, 0x44	; 68
     cc8:	cc d0       	rcall	.+408    	; 0xe62 <__subsf3>
     cca:	fa d1       	rcall	.+1012   	; 0x10c0 <__fixsfsi>
     ccc:	cb 01       	movw	r24, r22
     cce:	83 dc       	rcall	.-1786   	; 0x5d6 <UART1_TransNum>
     cd0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <c3>
     cd4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <c3+0x1>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	89 f4       	brne	.+34     	; 0xd00 <__vector_16+0x3c0>
     cde:	4f ef       	ldi	r20, 0xFF	; 255

				if(c3 == 1){
     ce0:	52 e0       	ldi	r21, 0x02	; 2
     ce2:	66 e9       	ldi	r22, 0x96	; 150
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	84 e0       	ldi	r24, 0x04	; 4
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	09 da       	rcall	.-3054   	; 0xfe <Dynamixel_Moving>
     cec:	8d e6       	ldi	r24, 0x6D	; 109
					Dynamixel_Moving(0x04, 0x96, 767);
     cee:	42 da       	rcall	.-2940   	; 0x174 <UART1_Transmit>
     cf0:	83 e3       	ldi	r24, 0x33	; 51
     cf2:	40 da       	rcall	.-2944   	; 0x174 <UART1_Transmit>
     cf4:	8d e3       	ldi	r24, 0x3D	; 61
     cf6:	3e da       	rcall	.-2948   	; 0x174 <UART1_Transmit>
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	6c dc       	rcall	.-1832   	; 0x5d6 <UART1_TransNum>
					UART1_Transmit('m');
     cfe:	12 c0       	rjmp	.+36     	; 0xd24 <__vector_16+0x3e4>
     d00:	89 2b       	or	r24, r25
     d02:	81 f4       	brne	.+32     	; 0xd24 <__vector_16+0x3e4>
					UART1_Transmit('3');
     d04:	42 ec       	ldi	r20, 0xC2	; 194
     d06:	51 e0       	ldi	r21, 0x01	; 1
     d08:	66 e9       	ldi	r22, 0x96	; 150
					UART1_Transmit('=');
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	90 e0       	ldi	r25, 0x00	; 0
					UART1_TransNum(767);
     d10:	f6 d9       	rcall	.-3092   	; 0xfe <Dynamixel_Moving>
     d12:	8d e6       	ldi	r24, 0x6D	; 109
     d14:	2f da       	rcall	.-2978   	; 0x174 <UART1_Transmit>
     d16:	83 e3       	ldi	r24, 0x33	; 51
     d18:	2d da       	rcall	.-2982   	; 0x174 <UART1_Transmit>
				}
				else if(c3 == 0){
     d1a:	8d e3       	ldi	r24, 0x3D	; 61
     d1c:	2b da       	rcall	.-2986   	; 0x174 <UART1_Transmit>
					Dynamixel_Moving(0x04, 0x96, 450);
     d1e:	82 ec       	ldi	r24, 0xC2	; 194
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	59 dc       	rcall	.-1870   	; 0x5d6 <UART1_TransNum>
     d24:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cnt+0x1>
     d28:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cnt>
     d2c:	8d e0       	ldi	r24, 0x0D	; 13
					UART1_Transmit('m');
     d2e:	22 da       	rcall	.-3004   	; 0x174 <UART1_Transmit>
     d30:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <d1>
					UART1_Transmit('3');
     d34:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <d1+0x1>
     d38:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <d1+0x2>
					UART1_Transmit('=');
     d3c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <d1+0x3>
					UART1_TransNum(450);
     d40:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     d44:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				}else;

				cnt = 0;
     d48:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     d4c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			}else;
						
		
			UART1_Transmit(13);
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27

			d1 = 0;
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
			d2 = 0;
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0b be       	out	0x3b, r0	; 59
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <__vector_14>:

		}
}
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <cnt1>
     d88:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <cnt1+0x1>
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <cnt1+0x1>
     d92:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <cnt1>
     d96:	44 97       	sbiw	r24, 0x14	; 20
     d98:	09 f0       	breq	.+2      	; 0xd9c <__vector_14+0x26>
     d9a:	4e c0       	rjmp	.+156    	; 0xe38 <__vector_14+0xc2>
{
	cnt1++;
	
	if(cnt1 == 20){

		if(c4 == 1){
     d9c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <c4>
     da0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <c4+0x1>
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	69 f4       	brne	.+26     	; 0xdc4 <__vector_14+0x4e>
			
			PORTE = 0b00001000; // 앞 뒤
     daa:	88 e0       	ldi	r24, 0x08	; 8
     dac:	83 b9       	out	0x03, r24	; 3
			
			OCR1A = 124; //OCR 설정 100% duty radio
     dae:	8c e7       	ldi	r24, 0x7C	; 124
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9b bd       	out	0x2b, r25	; 43
     db4:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 124;
     db6:	99 bd       	out	0x29, r25	; 41
     db8:	88 bd       	out	0x28, r24	; 40

			cnt1 = 0;
     dba:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <cnt1+0x1>
     dbe:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <cnt1>
     dc2:	1c c0       	rjmp	.+56     	; 0xdfc <__vector_14+0x86>
		}
		else if(c4 == 2){
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	91 05       	cpc	r25, r1
     dc8:	69 f4       	brne	.+26     	; 0xde4 <__vector_14+0x6e>
			
			PORTE = 0b00000100; // 앞 뒤
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	83 b9       	out	0x03, r24	; 3
			
			OCR1A = 124; //OCR 설정 100% duty radio
     dce:	8c e7       	ldi	r24, 0x7C	; 124
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9b bd       	out	0x2b, r25	; 43
     dd4:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 124;
     dd6:	99 bd       	out	0x29, r25	; 41
     dd8:	88 bd       	out	0x28, r24	; 40

			cnt1 = 0;
     dda:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <cnt1+0x1>
     dde:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <cnt1>
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <__vector_14+0x86>
		}
		else if(c4 == 0){
     de4:	89 2b       	or	r24, r25
     de6:	51 f4       	brne	.+20     	; 0xdfc <__vector_14+0x86>

			PORTE = 0b00000100; // 앞 뒤
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	83 b9       	out	0x03, r24	; 3
			
			OCR1A = 0; //OCR 설정 100% duty radio
     dec:	1b bc       	out	0x2b, r1	; 43
     dee:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 0;
     df0:	19 bc       	out	0x29, r1	; 41
     df2:	18 bc       	out	0x28, r1	; 40

			cnt1 = 0;
     df4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <cnt1+0x1>
     df8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <cnt1>
		}else;
		
		if(flag == 1){
     dfc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <flag>
     e00:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <flag+0x1>
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	a1 f4       	brne	.+40     	; 0xe30 <__vector_14+0xba>
			
			PORTE = 0b00001000; // 앞 뒤
     e08:	88 e0       	ldi	r24, 0x08	; 8
     e0a:	83 b9       	out	0x03, r24	; 3
			PORTA = 0x00;
     e0c:	1b ba       	out	0x1b, r1	; 27

			OCR1A = 0; //OCR 설정 50% duty radio
     e0e:	1b bc       	out	0x2b, r1	; 43
     e10:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 0;
     e12:	19 bc       	out	0x29, r1	; 41
     e14:	18 bc       	out	0x28, r1	; 40

			c4 = 0;
     e16:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <c4+0x1>
     e1a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <c4>
			flag = 0;
     e1e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <flag+0x1>
     e22:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <flag>

			cnt1 = 0;
     e26:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <cnt1+0x1>
     e2a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <cnt1>
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <__vector_14+0xc2>

		}else flag = 0;
     e30:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <flag+0x1>
     e34:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <flag>
	}
}
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <main>:

int main(void)
{
	ICR1 = 124;
     e46:	8c e7       	ldi	r24, 0x7C	; 124
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	97 bd       	out	0x27, r25	; 39
     e4c:	86 bd       	out	0x26, r24	; 38
	DDRA = 0xff;
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff;
     e52:	8b bb       	out	0x1b, r24	; 27

	UART0_INIT(); //Dynamixel
     e54:	44 d9       	rcall	.-3448   	; 0xde <UART0_INIT>
	UART1_INIT(); //serial 통신
     e56:	7f d9       	rcall	.-3330   	; 0x156 <UART1_INIT>
	DC_MotorSet();
     e58:	ed db       	rcall	.-2086   	; 0x634 <DC_MotorSet>
	IntSet();
     e5a:	6c dd       	rcall	.-1320   	; 0x934 <IntSet>
     e5c:	f4 db       	rcall	.-2072   	; 0x646 <TC0Set>
	TC0Set();
     e5e:	78 94       	sei
     e60:	ff cf       	rjmp	.-2      	; 0xe60 <main+0x1a>

00000e62 <__subsf3>:

	sei(); //전역 인터럽트 활성화
     e62:	50 58       	subi	r21, 0x80	; 128

00000e64 <__addsf3>:
     e64:	bb 27       	eor	r27, r27
     e66:	aa 27       	eor	r26, r26
     e68:	0e d0       	rcall	.+28     	; 0xe86 <__addsf3x>
     e6a:	d4 c1       	rjmp	.+936    	; 0x1214 <__fp_round>
     e6c:	c5 d1       	rcall	.+906    	; 0x11f8 <__fp_pscA>
     e6e:	30 f0       	brcs	.+12     	; 0xe7c <__addsf3+0x18>
     e70:	ca d1       	rcall	.+916    	; 0x1206 <__fp_pscB>
     e72:	20 f0       	brcs	.+8      	; 0xe7c <__addsf3+0x18>
     e74:	31 f4       	brne	.+12     	; 0xe82 <__addsf3+0x1e>
     e76:	9f 3f       	cpi	r25, 0xFF	; 255
     e78:	11 f4       	brne	.+4      	; 0xe7e <__addsf3+0x1a>
     e7a:	1e f4       	brtc	.+6      	; 0xe82 <__addsf3+0x1e>
     e7c:	95 c1       	rjmp	.+810    	; 0x11a8 <__fp_nan>
     e7e:	0e f4       	brtc	.+2      	; 0xe82 <__addsf3+0x1e>
     e80:	e0 95       	com	r30
     e82:	e7 fb       	bst	r30, 7
     e84:	8b c1       	rjmp	.+790    	; 0x119c <__fp_inf>

00000e86 <__addsf3x>:
     e86:	e9 2f       	mov	r30, r25
     e88:	d6 d1       	rcall	.+940    	; 0x1236 <__fp_split3>
     e8a:	80 f3       	brcs	.-32     	; 0xe6c <__addsf3+0x8>
     e8c:	ba 17       	cp	r27, r26
     e8e:	62 07       	cpc	r22, r18
     e90:	73 07       	cpc	r23, r19
     e92:	84 07       	cpc	r24, r20
     e94:	95 07       	cpc	r25, r21
     e96:	18 f0       	brcs	.+6      	; 0xe9e <__addsf3x+0x18>
     e98:	71 f4       	brne	.+28     	; 0xeb6 <__addsf3x+0x30>
     e9a:	9e f5       	brtc	.+102    	; 0xf02 <__addsf3x+0x7c>
     e9c:	ee c1       	rjmp	.+988    	; 0x127a <__fp_zero>
     e9e:	0e f4       	brtc	.+2      	; 0xea2 <__addsf3x+0x1c>
     ea0:	e0 95       	com	r30
     ea2:	0b 2e       	mov	r0, r27
     ea4:	ba 2f       	mov	r27, r26
     ea6:	a0 2d       	mov	r26, r0
     ea8:	0b 01       	movw	r0, r22
     eaa:	b9 01       	movw	r22, r18
     eac:	90 01       	movw	r18, r0
     eae:	0c 01       	movw	r0, r24
     eb0:	ca 01       	movw	r24, r20
     eb2:	a0 01       	movw	r20, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	ff 27       	eor	r31, r31
     eb8:	59 1b       	sub	r21, r25
     eba:	99 f0       	breq	.+38     	; 0xee2 <__addsf3x+0x5c>
     ebc:	59 3f       	cpi	r21, 0xF9	; 249
     ebe:	50 f4       	brcc	.+20     	; 0xed4 <__addsf3x+0x4e>
     ec0:	50 3e       	cpi	r21, 0xE0	; 224
     ec2:	68 f1       	brcs	.+90     	; 0xf1e <__addsf3x+0x98>
     ec4:	1a 16       	cp	r1, r26
     ec6:	f0 40       	sbci	r31, 0x00	; 0
     ec8:	a2 2f       	mov	r26, r18
     eca:	23 2f       	mov	r18, r19
     ecc:	34 2f       	mov	r19, r20
     ece:	44 27       	eor	r20, r20
     ed0:	58 5f       	subi	r21, 0xF8	; 248
     ed2:	f3 cf       	rjmp	.-26     	; 0xeba <__addsf3x+0x34>
     ed4:	46 95       	lsr	r20
     ed6:	37 95       	ror	r19
     ed8:	27 95       	ror	r18
     eda:	a7 95       	ror	r26
     edc:	f0 40       	sbci	r31, 0x00	; 0
     ede:	53 95       	inc	r21
     ee0:	c9 f7       	brne	.-14     	; 0xed4 <__addsf3x+0x4e>
     ee2:	7e f4       	brtc	.+30     	; 0xf02 <__addsf3x+0x7c>
     ee4:	1f 16       	cp	r1, r31
     ee6:	ba 0b       	sbc	r27, r26
     ee8:	62 0b       	sbc	r22, r18
     eea:	73 0b       	sbc	r23, r19
     eec:	84 0b       	sbc	r24, r20
     eee:	ba f0       	brmi	.+46     	; 0xf1e <__addsf3x+0x98>
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	a1 f0       	breq	.+40     	; 0xf1c <__addsf3x+0x96>
     ef4:	ff 0f       	add	r31, r31
     ef6:	bb 1f       	adc	r27, r27
     ef8:	66 1f       	adc	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	c2 f7       	brpl	.-16     	; 0xef0 <__addsf3x+0x6a>
     f00:	0e c0       	rjmp	.+28     	; 0xf1e <__addsf3x+0x98>
     f02:	ba 0f       	add	r27, r26
     f04:	62 1f       	adc	r22, r18
     f06:	73 1f       	adc	r23, r19
     f08:	84 1f       	adc	r24, r20
     f0a:	48 f4       	brcc	.+18     	; 0xf1e <__addsf3x+0x98>
     f0c:	87 95       	ror	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b7 95       	ror	r27
     f14:	f7 95       	ror	r31
     f16:	9e 3f       	cpi	r25, 0xFE	; 254
     f18:	08 f0       	brcs	.+2      	; 0xf1c <__addsf3x+0x96>
     f1a:	b3 cf       	rjmp	.-154    	; 0xe82 <__addsf3+0x1e>
     f1c:	93 95       	inc	r25
     f1e:	88 0f       	add	r24, r24
     f20:	08 f0       	brcs	.+2      	; 0xf24 <__addsf3x+0x9e>
     f22:	99 27       	eor	r25, r25
     f24:	ee 0f       	add	r30, r30
     f26:	97 95       	ror	r25
     f28:	87 95       	ror	r24
     f2a:	08 95       	ret
     f2c:	65 d1       	rcall	.+714    	; 0x11f8 <__fp_pscA>
     f2e:	58 f0       	brcs	.+22     	; 0xf46 <__addsf3x+0xc0>
     f30:	80 e8       	ldi	r24, 0x80	; 128
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	09 f4       	brne	.+2      	; 0xf38 <__addsf3x+0xb2>
     f36:	9e ef       	ldi	r25, 0xFE	; 254
     f38:	66 d1       	rcall	.+716    	; 0x1206 <__fp_pscB>
     f3a:	28 f0       	brcs	.+10     	; 0xf46 <__addsf3x+0xc0>
     f3c:	40 e8       	ldi	r20, 0x80	; 128
     f3e:	51 e0       	ldi	r21, 0x01	; 1
     f40:	59 f4       	brne	.+22     	; 0xf58 <atan2+0xe>
     f42:	5e ef       	ldi	r21, 0xFE	; 254
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <atan2+0xe>
     f46:	30 c1       	rjmp	.+608    	; 0x11a8 <__fp_nan>
     f48:	98 c1       	rjmp	.+816    	; 0x127a <__fp_zero>

00000f4a <atan2>:
     f4a:	e9 2f       	mov	r30, r25
     f4c:	e0 78       	andi	r30, 0x80	; 128
     f4e:	73 d1       	rcall	.+742    	; 0x1236 <__fp_split3>
     f50:	68 f3       	brcs	.-38     	; 0xf2c <__addsf3x+0xa6>
     f52:	09 2e       	mov	r0, r25
     f54:	05 2a       	or	r0, r21
     f56:	c1 f3       	breq	.-16     	; 0xf48 <__addsf3x+0xc2>
     f58:	26 17       	cp	r18, r22
     f5a:	37 07       	cpc	r19, r23
     f5c:	48 07       	cpc	r20, r24
     f5e:	59 07       	cpc	r21, r25
     f60:	38 f0       	brcs	.+14     	; 0xf70 <atan2+0x26>
     f62:	0e 2e       	mov	r0, r30
     f64:	07 f8       	bld	r0, 7
     f66:	e0 25       	eor	r30, r0
     f68:	69 f0       	breq	.+26     	; 0xf84 <atan2+0x3a>
     f6a:	e0 25       	eor	r30, r0
     f6c:	e0 64       	ori	r30, 0x40	; 64
     f6e:	0a c0       	rjmp	.+20     	; 0xf84 <atan2+0x3a>
     f70:	ef 63       	ori	r30, 0x3F	; 63
     f72:	07 f8       	bld	r0, 7
     f74:	00 94       	com	r0
     f76:	07 fa       	bst	r0, 7
     f78:	db 01       	movw	r26, r22
     f7a:	b9 01       	movw	r22, r18
     f7c:	9d 01       	movw	r18, r26
     f7e:	dc 01       	movw	r26, r24
     f80:	ca 01       	movw	r24, r20
     f82:	ad 01       	movw	r20, r26
     f84:	ef 93       	push	r30
     f86:	43 d0       	rcall	.+134    	; 0x100e <__divsf3_pse>
     f88:	45 d1       	rcall	.+650    	; 0x1214 <__fp_round>
     f8a:	0a d0       	rcall	.+20     	; 0xfa0 <atan>
     f8c:	5f 91       	pop	r21
     f8e:	55 23       	and	r21, r21
     f90:	31 f0       	breq	.+12     	; 0xf9e <atan2+0x54>
     f92:	2b ed       	ldi	r18, 0xDB	; 219
     f94:	3f e0       	ldi	r19, 0x0F	; 15
     f96:	49 e4       	ldi	r20, 0x49	; 73
     f98:	50 fd       	sbrc	r21, 0
     f9a:	49 ec       	ldi	r20, 0xC9	; 201
     f9c:	63 cf       	rjmp	.-314    	; 0xe64 <__addsf3>
     f9e:	08 95       	ret

00000fa0 <atan>:
     fa0:	df 93       	push	r29
     fa2:	dd 27       	eor	r29, r29
     fa4:	b9 2f       	mov	r27, r25
     fa6:	bf 77       	andi	r27, 0x7F	; 127
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	16 16       	cp	r1, r22
     fae:	17 06       	cpc	r1, r23
     fb0:	48 07       	cpc	r20, r24
     fb2:	5b 07       	cpc	r21, r27
     fb4:	10 f4       	brcc	.+4      	; 0xfba <atan+0x1a>
     fb6:	d9 2f       	mov	r29, r25
     fb8:	67 d1       	rcall	.+718    	; 0x1288 <inverse>
     fba:	9f 93       	push	r25
     fbc:	8f 93       	push	r24
     fbe:	7f 93       	push	r23
     fc0:	6f 93       	push	r22
     fc2:	0e d2       	rcall	.+1052   	; 0x13e0 <square>
     fc4:	ec e8       	ldi	r30, 0x8C	; 140
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	f2 d0       	rcall	.+484    	; 0x11ae <__fp_powser>
     fca:	24 d1       	rcall	.+584    	; 0x1214 <__fp_round>
     fcc:	2f 91       	pop	r18
     fce:	3f 91       	pop	r19
     fd0:	4f 91       	pop	r20
     fd2:	5f 91       	pop	r21
     fd4:	6c d1       	rcall	.+728    	; 0x12ae <__mulsf3x>
     fd6:	dd 23       	and	r29, r29
     fd8:	49 f0       	breq	.+18     	; 0xfec <atan+0x4c>
     fda:	90 58       	subi	r25, 0x80	; 128
     fdc:	a2 ea       	ldi	r26, 0xA2	; 162
     fde:	2a ed       	ldi	r18, 0xDA	; 218
     fe0:	3f e0       	ldi	r19, 0x0F	; 15
     fe2:	49 ec       	ldi	r20, 0xC9	; 201
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	d0 78       	andi	r29, 0x80	; 128
     fe8:	5d 27       	eor	r21, r29
     fea:	4d df       	rcall	.-358    	; 0xe86 <__addsf3x>
     fec:	df 91       	pop	r29
     fee:	12 c1       	rjmp	.+548    	; 0x1214 <__fp_round>

00000ff0 <__divsf3>:
     ff0:	0c d0       	rcall	.+24     	; 0x100a <__divsf3x>
     ff2:	10 c1       	rjmp	.+544    	; 0x1214 <__fp_round>
     ff4:	08 d1       	rcall	.+528    	; 0x1206 <__fp_pscB>
     ff6:	40 f0       	brcs	.+16     	; 0x1008 <__divsf3+0x18>
     ff8:	ff d0       	rcall	.+510    	; 0x11f8 <__fp_pscA>
     ffa:	30 f0       	brcs	.+12     	; 0x1008 <__divsf3+0x18>
     ffc:	21 f4       	brne	.+8      	; 0x1006 <__divsf3+0x16>
     ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    1000:	19 f0       	breq	.+6      	; 0x1008 <__divsf3+0x18>
    1002:	cc c0       	rjmp	.+408    	; 0x119c <__fp_inf>
    1004:	51 11       	cpse	r21, r1
    1006:	3a c1       	rjmp	.+628    	; 0x127c <__fp_szero>
    1008:	cf c0       	rjmp	.+414    	; 0x11a8 <__fp_nan>

0000100a <__divsf3x>:
    100a:	15 d1       	rcall	.+554    	; 0x1236 <__fp_split3>
    100c:	98 f3       	brcs	.-26     	; 0xff4 <__divsf3+0x4>

0000100e <__divsf3_pse>:
    100e:	99 23       	and	r25, r25
    1010:	c9 f3       	breq	.-14     	; 0x1004 <__divsf3+0x14>
    1012:	55 23       	and	r21, r21
    1014:	b1 f3       	breq	.-20     	; 0x1002 <__divsf3+0x12>
    1016:	95 1b       	sub	r25, r21
    1018:	55 0b       	sbc	r21, r21
    101a:	bb 27       	eor	r27, r27
    101c:	aa 27       	eor	r26, r26
    101e:	62 17       	cp	r22, r18
    1020:	73 07       	cpc	r23, r19
    1022:	84 07       	cpc	r24, r20
    1024:	38 f0       	brcs	.+14     	; 0x1034 <__divsf3_pse+0x26>
    1026:	9f 5f       	subi	r25, 0xFF	; 255
    1028:	5f 4f       	sbci	r21, 0xFF	; 255
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	44 1f       	adc	r20, r20
    1030:	aa 1f       	adc	r26, r26
    1032:	a9 f3       	breq	.-22     	; 0x101e <__divsf3_pse+0x10>
    1034:	33 d0       	rcall	.+102    	; 0x109c <__divsf3_pse+0x8e>
    1036:	0e 2e       	mov	r0, r30
    1038:	3a f0       	brmi	.+14     	; 0x1048 <__divsf3_pse+0x3a>
    103a:	e0 e8       	ldi	r30, 0x80	; 128
    103c:	30 d0       	rcall	.+96     	; 0x109e <__divsf3_pse+0x90>
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	50 40       	sbci	r21, 0x00	; 0
    1042:	e6 95       	lsr	r30
    1044:	00 1c       	adc	r0, r0
    1046:	ca f7       	brpl	.-14     	; 0x103a <__divsf3_pse+0x2c>
    1048:	29 d0       	rcall	.+82     	; 0x109c <__divsf3_pse+0x8e>
    104a:	fe 2f       	mov	r31, r30
    104c:	27 d0       	rcall	.+78     	; 0x109c <__divsf3_pse+0x8e>
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	bb 1f       	adc	r27, r27
    1056:	26 17       	cp	r18, r22
    1058:	37 07       	cpc	r19, r23
    105a:	48 07       	cpc	r20, r24
    105c:	ab 07       	cpc	r26, r27
    105e:	b0 e8       	ldi	r27, 0x80	; 128
    1060:	09 f0       	breq	.+2      	; 0x1064 <__divsf3_pse+0x56>
    1062:	bb 0b       	sbc	r27, r27
    1064:	80 2d       	mov	r24, r0
    1066:	bf 01       	movw	r22, r30
    1068:	ff 27       	eor	r31, r31
    106a:	93 58       	subi	r25, 0x83	; 131
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	2a f0       	brmi	.+10     	; 0x107a <__divsf3_pse+0x6c>
    1070:	9e 3f       	cpi	r25, 0xFE	; 254
    1072:	51 05       	cpc	r21, r1
    1074:	68 f0       	brcs	.+26     	; 0x1090 <__divsf3_pse+0x82>
    1076:	92 c0       	rjmp	.+292    	; 0x119c <__fp_inf>
    1078:	01 c1       	rjmp	.+514    	; 0x127c <__fp_szero>
    107a:	5f 3f       	cpi	r21, 0xFF	; 255
    107c:	ec f3       	brlt	.-6      	; 0x1078 <__divsf3_pse+0x6a>
    107e:	98 3e       	cpi	r25, 0xE8	; 232
    1080:	dc f3       	brlt	.-10     	; 0x1078 <__divsf3_pse+0x6a>
    1082:	86 95       	lsr	r24
    1084:	77 95       	ror	r23
    1086:	67 95       	ror	r22
    1088:	b7 95       	ror	r27
    108a:	f7 95       	ror	r31
    108c:	9f 5f       	subi	r25, 0xFF	; 255
    108e:	c9 f7       	brne	.-14     	; 0x1082 <__divsf3_pse+0x74>
    1090:	88 0f       	add	r24, r24
    1092:	91 1d       	adc	r25, r1
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	97 f9       	bld	r25, 7
    109a:	08 95       	ret
    109c:	e1 e0       	ldi	r30, 0x01	; 1
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	bb 1f       	adc	r27, r27
    10a6:	62 17       	cp	r22, r18
    10a8:	73 07       	cpc	r23, r19
    10aa:	84 07       	cpc	r24, r20
    10ac:	ba 07       	cpc	r27, r26
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <__divsf3_pse+0xaa>
    10b0:	62 1b       	sub	r22, r18
    10b2:	73 0b       	sbc	r23, r19
    10b4:	84 0b       	sbc	r24, r20
    10b6:	ba 0b       	sbc	r27, r26
    10b8:	ee 1f       	adc	r30, r30
    10ba:	88 f7       	brcc	.-30     	; 0x109e <__divsf3_pse+0x90>
    10bc:	e0 95       	com	r30
    10be:	08 95       	ret

000010c0 <__fixsfsi>:
    10c0:	04 d0       	rcall	.+8      	; 0x10ca <__fixunssfsi>
    10c2:	68 94       	set
    10c4:	b1 11       	cpse	r27, r1
    10c6:	da c0       	rjmp	.+436    	; 0x127c <__fp_szero>
    10c8:	08 95       	ret

000010ca <__fixunssfsi>:
    10ca:	bd d0       	rcall	.+378    	; 0x1246 <__fp_splitA>
    10cc:	88 f0       	brcs	.+34     	; 0x10f0 <__fixunssfsi+0x26>
    10ce:	9f 57       	subi	r25, 0x7F	; 127
    10d0:	90 f0       	brcs	.+36     	; 0x10f6 <__fixunssfsi+0x2c>
    10d2:	b9 2f       	mov	r27, r25
    10d4:	99 27       	eor	r25, r25
    10d6:	b7 51       	subi	r27, 0x17	; 23
    10d8:	a0 f0       	brcs	.+40     	; 0x1102 <__stack+0x3>
    10da:	d1 f0       	breq	.+52     	; 0x1110 <__stack+0x11>
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	1a f0       	brmi	.+6      	; 0x10ec <__fixunssfsi+0x22>
    10e6:	ba 95       	dec	r27
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__fixunssfsi+0x12>
    10ea:	12 c0       	rjmp	.+36     	; 0x1110 <__stack+0x11>
    10ec:	b1 30       	cpi	r27, 0x01	; 1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <__stack+0x11>
    10f0:	c4 d0       	rcall	.+392    	; 0x127a <__fp_zero>
    10f2:	b1 e0       	ldi	r27, 0x01	; 1
    10f4:	08 95       	ret
    10f6:	c1 c0       	rjmp	.+386    	; 0x127a <__fp_zero>
    10f8:	67 2f       	mov	r22, r23
    10fa:	78 2f       	mov	r23, r24
    10fc:	88 27       	eor	r24, r24
    10fe:	b8 5f       	subi	r27, 0xF8	; 248
    1100:	39 f0       	breq	.+14     	; 0x1110 <__stack+0x11>
    1102:	b9 3f       	cpi	r27, 0xF9	; 249
    1104:	cc f3       	brlt	.-14     	; 0x10f8 <__fixunssfsi+0x2e>
    1106:	86 95       	lsr	r24
    1108:	77 95       	ror	r23
    110a:	67 95       	ror	r22
    110c:	b3 95       	inc	r27
    110e:	d9 f7       	brne	.-10     	; 0x1106 <__stack+0x7>
    1110:	3e f4       	brtc	.+14     	; 0x1120 <__stack+0x21>
    1112:	90 95       	com	r25
    1114:	80 95       	com	r24
    1116:	70 95       	com	r23
    1118:	61 95       	neg	r22
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	8f 4f       	sbci	r24, 0xFF	; 255
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	08 95       	ret

00001122 <__floatunsisf>:
    1122:	e8 94       	clt
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <__floatsisf+0x12>

00001126 <__floatsisf>:
    1126:	97 fb       	bst	r25, 7
    1128:	3e f4       	brtc	.+14     	; 0x1138 <__floatsisf+0x12>
    112a:	90 95       	com	r25
    112c:	80 95       	com	r24
    112e:	70 95       	com	r23
    1130:	61 95       	neg	r22
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	99 23       	and	r25, r25
    113a:	a9 f0       	breq	.+42     	; 0x1166 <__floatsisf+0x40>
    113c:	f9 2f       	mov	r31, r25
    113e:	96 e9       	ldi	r25, 0x96	; 150
    1140:	bb 27       	eor	r27, r27
    1142:	93 95       	inc	r25
    1144:	f6 95       	lsr	r31
    1146:	87 95       	ror	r24
    1148:	77 95       	ror	r23
    114a:	67 95       	ror	r22
    114c:	b7 95       	ror	r27
    114e:	f1 11       	cpse	r31, r1
    1150:	f8 cf       	rjmp	.-16     	; 0x1142 <__floatsisf+0x1c>
    1152:	fa f4       	brpl	.+62     	; 0x1192 <__floatsisf+0x6c>
    1154:	bb 0f       	add	r27, r27
    1156:	11 f4       	brne	.+4      	; 0x115c <__floatsisf+0x36>
    1158:	60 ff       	sbrs	r22, 0
    115a:	1b c0       	rjmp	.+54     	; 0x1192 <__floatsisf+0x6c>
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <__floatsisf+0x6c>
    1166:	88 23       	and	r24, r24
    1168:	11 f0       	breq	.+4      	; 0x116e <__floatsisf+0x48>
    116a:	96 e9       	ldi	r25, 0x96	; 150
    116c:	11 c0       	rjmp	.+34     	; 0x1190 <__floatsisf+0x6a>
    116e:	77 23       	and	r23, r23
    1170:	21 f0       	breq	.+8      	; 0x117a <__floatsisf+0x54>
    1172:	9e e8       	ldi	r25, 0x8E	; 142
    1174:	87 2f       	mov	r24, r23
    1176:	76 2f       	mov	r23, r22
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <__floatsisf+0x5e>
    117a:	66 23       	and	r22, r22
    117c:	71 f0       	breq	.+28     	; 0x119a <__floatsisf+0x74>
    117e:	96 e8       	ldi	r25, 0x86	; 134
    1180:	86 2f       	mov	r24, r22
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	2a f0       	brmi	.+10     	; 0x1192 <__floatsisf+0x6c>
    1188:	9a 95       	dec	r25
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	da f7       	brpl	.-10     	; 0x1188 <__floatsisf+0x62>
    1192:	88 0f       	add	r24, r24
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret

0000119c <__fp_inf>:
    119c:	97 f9       	bld	r25, 7
    119e:	9f 67       	ori	r25, 0x7F	; 127
    11a0:	80 e8       	ldi	r24, 0x80	; 128
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	08 95       	ret

000011a8 <__fp_nan>:
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	80 ec       	ldi	r24, 0xC0	; 192
    11ac:	08 95       	ret

000011ae <__fp_powser>:
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	1f 93       	push	r17
    11b4:	0f 93       	push	r16
    11b6:	ff 92       	push	r15
    11b8:	ef 92       	push	r14
    11ba:	df 92       	push	r13
    11bc:	7b 01       	movw	r14, r22
    11be:	8c 01       	movw	r16, r24
    11c0:	68 94       	set
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <__fp_powser+0x20>
    11c4:	da 2e       	mov	r13, r26
    11c6:	ef 01       	movw	r28, r30
    11c8:	72 d0       	rcall	.+228    	; 0x12ae <__mulsf3x>
    11ca:	fe 01       	movw	r30, r28
    11cc:	e8 94       	clt
    11ce:	a5 91       	lpm	r26, Z+
    11d0:	25 91       	lpm	r18, Z+
    11d2:	35 91       	lpm	r19, Z+
    11d4:	45 91       	lpm	r20, Z+
    11d6:	55 91       	lpm	r21, Z+
    11d8:	ae f3       	brts	.-22     	; 0x11c4 <__fp_powser+0x16>
    11da:	ef 01       	movw	r28, r30
    11dc:	54 de       	rcall	.-856    	; 0xe86 <__addsf3x>
    11de:	fe 01       	movw	r30, r28
    11e0:	97 01       	movw	r18, r14
    11e2:	a8 01       	movw	r20, r16
    11e4:	da 94       	dec	r13
    11e6:	79 f7       	brne	.-34     	; 0x11c6 <__fp_powser+0x18>
    11e8:	df 90       	pop	r13
    11ea:	ef 90       	pop	r14
    11ec:	ff 90       	pop	r15
    11ee:	0f 91       	pop	r16
    11f0:	1f 91       	pop	r17
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <__fp_pscA>:
    11f8:	00 24       	eor	r0, r0
    11fa:	0a 94       	dec	r0
    11fc:	16 16       	cp	r1, r22
    11fe:	17 06       	cpc	r1, r23
    1200:	18 06       	cpc	r1, r24
    1202:	09 06       	cpc	r0, r25
    1204:	08 95       	ret

00001206 <__fp_pscB>:
    1206:	00 24       	eor	r0, r0
    1208:	0a 94       	dec	r0
    120a:	12 16       	cp	r1, r18
    120c:	13 06       	cpc	r1, r19
    120e:	14 06       	cpc	r1, r20
    1210:	05 06       	cpc	r0, r21
    1212:	08 95       	ret

00001214 <__fp_round>:
    1214:	09 2e       	mov	r0, r25
    1216:	03 94       	inc	r0
    1218:	00 0c       	add	r0, r0
    121a:	11 f4       	brne	.+4      	; 0x1220 <__fp_round+0xc>
    121c:	88 23       	and	r24, r24
    121e:	52 f0       	brmi	.+20     	; 0x1234 <__fp_round+0x20>
    1220:	bb 0f       	add	r27, r27
    1222:	40 f4       	brcc	.+16     	; 0x1234 <__fp_round+0x20>
    1224:	bf 2b       	or	r27, r31
    1226:	11 f4       	brne	.+4      	; 0x122c <__fp_round+0x18>
    1228:	60 ff       	sbrs	r22, 0
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <__fp_round+0x20>
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	08 95       	ret

00001236 <__fp_split3>:
    1236:	57 fd       	sbrc	r21, 7
    1238:	90 58       	subi	r25, 0x80	; 128
    123a:	44 0f       	add	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	59 f0       	breq	.+22     	; 0x1256 <__fp_splitA+0x10>
    1240:	5f 3f       	cpi	r21, 0xFF	; 255
    1242:	71 f0       	breq	.+28     	; 0x1260 <__fp_splitA+0x1a>
    1244:	47 95       	ror	r20

00001246 <__fp_splitA>:
    1246:	88 0f       	add	r24, r24
    1248:	97 fb       	bst	r25, 7
    124a:	99 1f       	adc	r25, r25
    124c:	61 f0       	breq	.+24     	; 0x1266 <__fp_splitA+0x20>
    124e:	9f 3f       	cpi	r25, 0xFF	; 255
    1250:	79 f0       	breq	.+30     	; 0x1270 <__fp_splitA+0x2a>
    1252:	87 95       	ror	r24
    1254:	08 95       	ret
    1256:	12 16       	cp	r1, r18
    1258:	13 06       	cpc	r1, r19
    125a:	14 06       	cpc	r1, r20
    125c:	55 1f       	adc	r21, r21
    125e:	f2 cf       	rjmp	.-28     	; 0x1244 <__fp_split3+0xe>
    1260:	46 95       	lsr	r20
    1262:	f1 df       	rcall	.-30     	; 0x1246 <__fp_splitA>
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <__fp_splitA+0x30>
    1266:	16 16       	cp	r1, r22
    1268:	17 06       	cpc	r1, r23
    126a:	18 06       	cpc	r1, r24
    126c:	99 1f       	adc	r25, r25
    126e:	f1 cf       	rjmp	.-30     	; 0x1252 <__fp_splitA+0xc>
    1270:	86 95       	lsr	r24
    1272:	71 05       	cpc	r23, r1
    1274:	61 05       	cpc	r22, r1
    1276:	08 94       	sec
    1278:	08 95       	ret

0000127a <__fp_zero>:
    127a:	e8 94       	clt

0000127c <__fp_szero>:
    127c:	bb 27       	eor	r27, r27
    127e:	66 27       	eor	r22, r22
    1280:	77 27       	eor	r23, r23
    1282:	cb 01       	movw	r24, r22
    1284:	97 f9       	bld	r25, 7
    1286:	08 95       	ret

00001288 <inverse>:
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	80 e8       	ldi	r24, 0x80	; 128
    1292:	9f e3       	ldi	r25, 0x3F	; 63
    1294:	ad ce       	rjmp	.-678    	; 0xff0 <__divsf3>

00001296 <__mulsf3>:
    1296:	0b d0       	rcall	.+22     	; 0x12ae <__mulsf3x>
    1298:	bd cf       	rjmp	.-134    	; 0x1214 <__fp_round>
    129a:	ae df       	rcall	.-164    	; 0x11f8 <__fp_pscA>
    129c:	28 f0       	brcs	.+10     	; 0x12a8 <__mulsf3+0x12>
    129e:	b3 df       	rcall	.-154    	; 0x1206 <__fp_pscB>
    12a0:	18 f0       	brcs	.+6      	; 0x12a8 <__mulsf3+0x12>
    12a2:	95 23       	and	r25, r21
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <__mulsf3+0x12>
    12a6:	7a cf       	rjmp	.-268    	; 0x119c <__fp_inf>
    12a8:	7f cf       	rjmp	.-258    	; 0x11a8 <__fp_nan>
    12aa:	11 24       	eor	r1, r1
    12ac:	e7 cf       	rjmp	.-50     	; 0x127c <__fp_szero>

000012ae <__mulsf3x>:
    12ae:	c3 df       	rcall	.-122    	; 0x1236 <__fp_split3>
    12b0:	a0 f3       	brcs	.-24     	; 0x129a <__mulsf3+0x4>

000012b2 <__mulsf3_pse>:
    12b2:	95 9f       	mul	r25, r21
    12b4:	d1 f3       	breq	.-12     	; 0x12aa <__mulsf3+0x14>
    12b6:	95 0f       	add	r25, r21
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	55 1f       	adc	r21, r21
    12bc:	62 9f       	mul	r22, r18
    12be:	f0 01       	movw	r30, r0
    12c0:	72 9f       	mul	r23, r18
    12c2:	bb 27       	eor	r27, r27
    12c4:	f0 0d       	add	r31, r0
    12c6:	b1 1d       	adc	r27, r1
    12c8:	63 9f       	mul	r22, r19
    12ca:	aa 27       	eor	r26, r26
    12cc:	f0 0d       	add	r31, r0
    12ce:	b1 1d       	adc	r27, r1
    12d0:	aa 1f       	adc	r26, r26
    12d2:	64 9f       	mul	r22, r20
    12d4:	66 27       	eor	r22, r22
    12d6:	b0 0d       	add	r27, r0
    12d8:	a1 1d       	adc	r26, r1
    12da:	66 1f       	adc	r22, r22
    12dc:	82 9f       	mul	r24, r18
    12de:	22 27       	eor	r18, r18
    12e0:	b0 0d       	add	r27, r0
    12e2:	a1 1d       	adc	r26, r1
    12e4:	62 1f       	adc	r22, r18
    12e6:	73 9f       	mul	r23, r19
    12e8:	b0 0d       	add	r27, r0
    12ea:	a1 1d       	adc	r26, r1
    12ec:	62 1f       	adc	r22, r18
    12ee:	83 9f       	mul	r24, r19
    12f0:	a0 0d       	add	r26, r0
    12f2:	61 1d       	adc	r22, r1
    12f4:	22 1f       	adc	r18, r18
    12f6:	74 9f       	mul	r23, r20
    12f8:	33 27       	eor	r19, r19
    12fa:	a0 0d       	add	r26, r0
    12fc:	61 1d       	adc	r22, r1
    12fe:	23 1f       	adc	r18, r19
    1300:	84 9f       	mul	r24, r20
    1302:	60 0d       	add	r22, r0
    1304:	21 1d       	adc	r18, r1
    1306:	82 2f       	mov	r24, r18
    1308:	76 2f       	mov	r23, r22
    130a:	6a 2f       	mov	r22, r26
    130c:	11 24       	eor	r1, r1
    130e:	9f 57       	subi	r25, 0x7F	; 127
    1310:	50 40       	sbci	r21, 0x00	; 0
    1312:	8a f0       	brmi	.+34     	; 0x1336 <__mulsf3_pse+0x84>
    1314:	e1 f0       	breq	.+56     	; 0x134e <__mulsf3_pse+0x9c>
    1316:	88 23       	and	r24, r24
    1318:	4a f0       	brmi	.+18     	; 0x132c <__mulsf3_pse+0x7a>
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	bb 1f       	adc	r27, r27
    1320:	66 1f       	adc	r22, r22
    1322:	77 1f       	adc	r23, r23
    1324:	88 1f       	adc	r24, r24
    1326:	91 50       	subi	r25, 0x01	; 1
    1328:	50 40       	sbci	r21, 0x00	; 0
    132a:	a9 f7       	brne	.-22     	; 0x1316 <__mulsf3_pse+0x64>
    132c:	9e 3f       	cpi	r25, 0xFE	; 254
    132e:	51 05       	cpc	r21, r1
    1330:	70 f0       	brcs	.+28     	; 0x134e <__mulsf3_pse+0x9c>
    1332:	34 cf       	rjmp	.-408    	; 0x119c <__fp_inf>
    1334:	a3 cf       	rjmp	.-186    	; 0x127c <__fp_szero>
    1336:	5f 3f       	cpi	r21, 0xFF	; 255
    1338:	ec f3       	brlt	.-6      	; 0x1334 <__mulsf3_pse+0x82>
    133a:	98 3e       	cpi	r25, 0xE8	; 232
    133c:	dc f3       	brlt	.-10     	; 0x1334 <__mulsf3_pse+0x82>
    133e:	86 95       	lsr	r24
    1340:	77 95       	ror	r23
    1342:	67 95       	ror	r22
    1344:	b7 95       	ror	r27
    1346:	f7 95       	ror	r31
    1348:	e7 95       	ror	r30
    134a:	9f 5f       	subi	r25, 0xFF	; 255
    134c:	c1 f7       	brne	.-16     	; 0x133e <__mulsf3_pse+0x8c>
    134e:	fe 2b       	or	r31, r30
    1350:	88 0f       	add	r24, r24
    1352:	91 1d       	adc	r25, r1
    1354:	96 95       	lsr	r25
    1356:	87 95       	ror	r24
    1358:	97 f9       	bld	r25, 7
    135a:	08 95       	ret
    135c:	11 f4       	brne	.+4      	; 0x1362 <__mulsf3_pse+0xb0>
    135e:	0e f4       	brtc	.+2      	; 0x1362 <__mulsf3_pse+0xb0>
    1360:	23 cf       	rjmp	.-442    	; 0x11a8 <__fp_nan>
    1362:	41 c0       	rjmp	.+130    	; 0x13e6 <__fp_mpack>

00001364 <sqrt>:
    1364:	70 df       	rcall	.-288    	; 0x1246 <__fp_splitA>
    1366:	d0 f3       	brcs	.-12     	; 0x135c <__mulsf3_pse+0xaa>
    1368:	99 23       	and	r25, r25
    136a:	d9 f3       	breq	.-10     	; 0x1362 <__mulsf3_pse+0xb0>
    136c:	ce f3       	brts	.-14     	; 0x1360 <__mulsf3_pse+0xae>
    136e:	9f 57       	subi	r25, 0x7F	; 127
    1370:	55 0b       	sbc	r21, r21
    1372:	87 ff       	sbrs	r24, 7
    1374:	46 d0       	rcall	.+140    	; 0x1402 <__fp_norm2>
    1376:	00 24       	eor	r0, r0
    1378:	a0 e6       	ldi	r26, 0x60	; 96
    137a:	40 ea       	ldi	r20, 0xA0	; 160
    137c:	90 01       	movw	r18, r0
    137e:	80 58       	subi	r24, 0x80	; 128
    1380:	56 95       	lsr	r21
    1382:	97 95       	ror	r25
    1384:	28 f4       	brcc	.+10     	; 0x1390 <sqrt+0x2c>
    1386:	80 5c       	subi	r24, 0xC0	; 192
    1388:	66 0f       	add	r22, r22
    138a:	77 1f       	adc	r23, r23
    138c:	88 1f       	adc	r24, r24
    138e:	20 f0       	brcs	.+8      	; 0x1398 <sqrt+0x34>
    1390:	26 17       	cp	r18, r22
    1392:	37 07       	cpc	r19, r23
    1394:	48 07       	cpc	r20, r24
    1396:	30 f4       	brcc	.+12     	; 0x13a4 <sqrt+0x40>
    1398:	62 1b       	sub	r22, r18
    139a:	73 0b       	sbc	r23, r19
    139c:	84 0b       	sbc	r24, r20
    139e:	20 29       	or	r18, r0
    13a0:	31 29       	or	r19, r1
    13a2:	4a 2b       	or	r20, r26
    13a4:	a6 95       	lsr	r26
    13a6:	17 94       	ror	r1
    13a8:	07 94       	ror	r0
    13aa:	20 25       	eor	r18, r0
    13ac:	31 25       	eor	r19, r1
    13ae:	4a 27       	eor	r20, r26
    13b0:	58 f7       	brcc	.-42     	; 0x1388 <sqrt+0x24>
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	20 f0       	brcs	.+8      	; 0x13c2 <sqrt+0x5e>
    13ba:	26 17       	cp	r18, r22
    13bc:	37 07       	cpc	r19, r23
    13be:	48 07       	cpc	r20, r24
    13c0:	30 f4       	brcc	.+12     	; 0x13ce <sqrt+0x6a>
    13c2:	62 0b       	sbc	r22, r18
    13c4:	73 0b       	sbc	r23, r19
    13c6:	84 0b       	sbc	r24, r20
    13c8:	20 0d       	add	r18, r0
    13ca:	31 1d       	adc	r19, r1
    13cc:	41 1d       	adc	r20, r1
    13ce:	a0 95       	com	r26
    13d0:	81 f7       	brne	.-32     	; 0x13b2 <sqrt+0x4e>
    13d2:	b9 01       	movw	r22, r18
    13d4:	84 2f       	mov	r24, r20
    13d6:	91 58       	subi	r25, 0x81	; 129
    13d8:	88 0f       	add	r24, r24
    13da:	96 95       	lsr	r25
    13dc:	87 95       	ror	r24
    13de:	08 95       	ret

000013e0 <square>:
    13e0:	9b 01       	movw	r18, r22
    13e2:	ac 01       	movw	r20, r24
    13e4:	58 cf       	rjmp	.-336    	; 0x1296 <__mulsf3>

000013e6 <__fp_mpack>:
    13e6:	9f 3f       	cpi	r25, 0xFF	; 255
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <__fp_mpack_finite+0xc>

000013ea <__fp_mpack_finite>:
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	20 f4       	brcc	.+8      	; 0x13f6 <__fp_mpack_finite+0xc>
    13ee:	87 95       	ror	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b7 95       	ror	r27
    13f6:	88 0f       	add	r24, r24
    13f8:	91 1d       	adc	r25, r1
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret

00001402 <__fp_norm2>:
    1402:	91 50       	subi	r25, 0x01	; 1
    1404:	50 40       	sbci	r21, 0x00	; 0
    1406:	66 0f       	add	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	d2 f7       	brpl	.-12     	; 0x1402 <__fp_norm2>
    140e:	08 95       	ret

00001410 <__divmodhi4>:
    1410:	97 fb       	bst	r25, 7
    1412:	07 2e       	mov	r0, r23
    1414:	16 f4       	brtc	.+4      	; 0x141a <__divmodhi4+0xa>
    1416:	00 94       	com	r0
    1418:	06 d0       	rcall	.+12     	; 0x1426 <__divmodhi4_neg1>
    141a:	77 fd       	sbrc	r23, 7
    141c:	08 d0       	rcall	.+16     	; 0x142e <__divmodhi4_neg2>
    141e:	0b d0       	rcall	.+22     	; 0x1436 <__udivmodhi4>
    1420:	07 fc       	sbrc	r0, 7
    1422:	05 d0       	rcall	.+10     	; 0x142e <__divmodhi4_neg2>
    1424:	3e f4       	brtc	.+14     	; 0x1434 <__divmodhi4_exit>

00001426 <__divmodhi4_neg1>:
    1426:	90 95       	com	r25
    1428:	81 95       	neg	r24
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	08 95       	ret

0000142e <__divmodhi4_neg2>:
    142e:	70 95       	com	r23
    1430:	61 95       	neg	r22
    1432:	7f 4f       	sbci	r23, 0xFF	; 255

00001434 <__divmodhi4_exit>:
    1434:	08 95       	ret

00001436 <__udivmodhi4>:
    1436:	aa 1b       	sub	r26, r26
    1438:	bb 1b       	sub	r27, r27
    143a:	51 e1       	ldi	r21, 0x11	; 17
    143c:	07 c0       	rjmp	.+14     	; 0x144c <__udivmodhi4_ep>

0000143e <__udivmodhi4_loop>:
    143e:	aa 1f       	adc	r26, r26
    1440:	bb 1f       	adc	r27, r27
    1442:	a6 17       	cp	r26, r22
    1444:	b7 07       	cpc	r27, r23
    1446:	10 f0       	brcs	.+4      	; 0x144c <__udivmodhi4_ep>
    1448:	a6 1b       	sub	r26, r22
    144a:	b7 0b       	sbc	r27, r23

0000144c <__udivmodhi4_ep>:
    144c:	88 1f       	adc	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	5a 95       	dec	r21
    1452:	a9 f7       	brne	.-22     	; 0x143e <__udivmodhi4_loop>
    1454:	80 95       	com	r24
    1456:	90 95       	com	r25
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	08 95       	ret

0000145e <atoi>:
    145e:	fc 01       	movw	r30, r24
    1460:	88 27       	eor	r24, r24
    1462:	99 27       	eor	r25, r25
    1464:	e8 94       	clt
    1466:	21 91       	ld	r18, Z+
    1468:	20 32       	cpi	r18, 0x20	; 32
    146a:	e9 f3       	breq	.-6      	; 0x1466 <atoi+0x8>
    146c:	29 30       	cpi	r18, 0x09	; 9
    146e:	10 f0       	brcs	.+4      	; 0x1474 <atoi+0x16>
    1470:	2e 30       	cpi	r18, 0x0E	; 14
    1472:	c8 f3       	brcs	.-14     	; 0x1466 <atoi+0x8>
    1474:	2b 32       	cpi	r18, 0x2B	; 43
    1476:	39 f0       	breq	.+14     	; 0x1486 <atoi+0x28>
    1478:	2d 32       	cpi	r18, 0x2D	; 45
    147a:	31 f4       	brne	.+12     	; 0x1488 <atoi+0x2a>
    147c:	68 94       	set
    147e:	03 c0       	rjmp	.+6      	; 0x1486 <atoi+0x28>
    1480:	0b d0       	rcall	.+22     	; 0x1498 <__mulhi_const_10>
    1482:	82 0f       	add	r24, r18
    1484:	91 1d       	adc	r25, r1
    1486:	21 91       	ld	r18, Z+
    1488:	20 53       	subi	r18, 0x30	; 48
    148a:	2a 30       	cpi	r18, 0x0A	; 10
    148c:	c8 f3       	brcs	.-14     	; 0x1480 <atoi+0x22>
    148e:	1e f4       	brtc	.+6      	; 0x1496 <atoi+0x38>
    1490:	90 95       	com	r25
    1492:	81 95       	neg	r24
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	08 95       	ret

00001498 <__mulhi_const_10>:
    1498:	7a e0       	ldi	r23, 0x0A	; 10
    149a:	97 9f       	mul	r25, r23
    149c:	90 2d       	mov	r25, r0
    149e:	87 9f       	mul	r24, r23
    14a0:	80 2d       	mov	r24, r0
    14a2:	91 0d       	add	r25, r1
    14a4:	11 24       	eor	r1, r1
    14a6:	08 95       	ret

000014a8 <_exit>:
    14a8:	f8 94       	cli

000014aa <__stop_program>:
    14aa:	ff cf       	rjmp	.-2      	; 0x14aa <__stop_program>
